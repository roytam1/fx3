#filter substitution

var srDest = $SpaceRequired$;
var err;
var fProgram;
var platformNode;
var searchPlugins = "searchplugins";

platformNode = getPlatform();
if (platformNode == 'mac') {
  searchPlugins = "Search Plugins";
}
logComment("initInstall: platformNode=" + platformNode);
// end
// end - OS type detection

var prettyName = "@AB_CD@ Language Pack";
var chromeNode = "@AB_CD@";

var regName    = "locales/mozilla/" + chromeNode;
var chromeName = chromeNode + ".jar";
var localeName = "locale/" + chromeNode + "/";

err = initInstall(prettyName, regName, "$Version$"); 
logComment("initInstall: " + err);

fProgram = getFolder("Program");
logComment("fProgram: " + fProgram);

if (verifyDiskSpace(fProgram, srDest))
{
    var chromeType = LOCALE;
    var fTarget;

    err = addDirectory("",
                       "bin",
                       fProgram,
                       "");
    logComment("addDirectory() returned: " + err);

    setPackageFolder(fProgram);
 
    // check return value
    if (err == SUCCESS)
    {
        fTarget = getFolder("Program", "defaults");
        logComment("fTarget: " + fTarget);
        err = addDirectory("",
                           "bin/defaults", // dir name in JAR to extract
                           fTarget,        // Where to put this file
                           "");            // subdir name relative to fProgram
        logComment("addDirectory() returned: " + err);

        fTarget = getFolder("Program", searchPlugins);
        logComment("fTarget: " + fTarget);
        err = addDirectory("",
                           "bin/searchplugins",
                           fTarget,
                           "");
        logComment("addDirectory() returned: " + err);

        err = performInstall(); 
        logComment("performInstall() returned: " + err);
    }
    else
    {
        cancelInstall(err);
        logComment("cancelInstall due to error: " + err);
    }
}
else
    cancelInstall(INSUFFICIENT_DISK_SPACE);
