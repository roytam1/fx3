<?xml version="1.0"?>

# -*- Mode: HTML -*-
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Mozilla Communicator client code, released
# March 31, 1998.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1998-1999
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Scott MacGregor <mscott@mozilla.org>
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# ***** END LICENSE BLOCK *****

<bindings id="SearchBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="searchbar" extends="chrome://global/content/bindings/textbox.xml#textbox">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    <content> 
      <children/>
      <xul:hbox class="quick-search-textbox textbox-input-box" flex="1">
        <html:input class="textbox-input" flex="1" anonid="input" allowevents="true"
                    xbl:inherits="onfocus,onblur,value,type,maxlength,disabled,size,readonly,tabindex,accesskey"/>
      </xul:hbox>
      <xul:toolbarbutton id="quick-search-clearbutton" xbl:inherits="" disabled="true" class="quick-search-clearbutton" onclick="onClearSearch(); return false;"/>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // initialize the quick search mode based on the checked menu item
          var desiredQuickSearchMode = document.getElementById('quick-search-menupopup').getAttribute('value');             
          
          var menuItems = document.getElementById('quick-search-menupopup').getElementsByAttribute('value', '*');
          var selectedMenuItem;
          for (var index = 0; index < menuItems.length; index++) 
            if (menuItems[index].value == desiredQuickSearchMode)
            {
              selectedMenuItem = menuItems[index];
              break;
            }
          
          // if we failed to find selectedMenuItemVal in our array of menuitems
          // then just use the first menu item in the array (surely we have at least one menu item!)
          // This scenario happens when we decide to obsolete/delete search modes from 
          // the quick search drop down.
          if (!selectedMenuItem)
            selectedMenuItem = menuItems[0];
            
          selectedMenuItem.setAttribute('checked', 'true');
          this.mQuickSearchMode = selectedMenuItem.value; // the checked menu item                
          this.setSearchCriteriaText();
        ]]>
      </constructor>

      <property name="showingSearchCriteria" onget="return this.getAttribute('searchCriteria') == 'true';"
                onset="this.setAttribute('searchCriteria', val); return val;"/>

      <property name="clearButtonHidden" onget="return document.getElementById('quick-search-clearbutton').getAttribute('clearButtonHidden') == 'true';"
                onset="document.getElementById('quick-search-clearbutton').setAttribute('clearButtonHidden', val); return val;"/>

      <field name="mQuickSearchMode">0</field>

      // DND Observer
      <field name="searchInputDNDObserver" readonly="true"><![CDATA[
      ({
        inputSearch: this,

        onDrop: function (aEvent, aXferData, aDragSession)
        {
          if (aXferData.data) {
            this.inputSearch.focus();
            this.inputSearch.value = aXferData.data;
            this.inputSearch.clearButtonHidden = false;
            onSearchInput(true);
          }
        },

        getSupportedFlavours: function ()
        {
          var flavourSet = new FlavourSet();
          flavourSet.appendFlavour("text/unicode");
          return flavourSet;
        }
      })
      ]]></field>

      <property name="searchMode" onget="return this.mQuickSearchMode;"
                onset="this.mQuickSearchMode = val; document.getElementById('quick-search-menupopup').setAttribute('value', val);"/>

      <method name="setSearchCriteriaText">
        <body><![CDATA[
          this.showingSearchCriteria = true;
         // extract the label value from the menu item
         var menuItems = document.getElementById('quick-search-menupopup').getElementsByAttribute('value', this.searchMode);          
         this.inputField.value = menuItems[0].getAttribute('label');
         this.clearButtonHidden = true;
        ]]></body>
      </method>

      <method name="openmenupopup">
        <body>
          <![CDATA[
            document.getElementById('quick-search-menupopup').click();
            return false;
          ]]>
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="input">
        <![CDATA[ 
          if (!this.value) 
            this.clearButtonHidden = true;
          else 
            this.clearButtonHidden = false;
        ]]></handler>

      <handler event="keypress" keycode="vk_up" modifiers="control" phase="capturing">
        <![CDATA[
          var  menuPopup = document.getElementById('quick-search-menupopup');
          var menuPopupValue = menuPopup.getAttribute('value');
          if (menuPopupValue > 0)
          {
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].removeAttribute('checked');
            this.searchMode = --menuPopupValue;
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].setAttribute('checked', 'true');
            menuPopup.setAttribute('value', this.searchMode);
          }
        ]]></handler>

      <handler event="keypress" keycode="vk_down" modifiers="control" phase="capturing">
        <![CDATA[
          var  menuPopup = document.getElementById('quick-search-menupopup');
          var menuPopupValue = menuPopup.getAttribute('value');
          if (menuPopupValue < 4) // Keep this value in synch with mailWindowOverlay.xul
          {
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].removeAttribute('checked');
            this.searchMode = ++menuPopupValue;
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].setAttribute('checked', 'true');
            menuPopup.setAttribute('value', this.searchMode);
          }
        ]]></handler>

        <handler event="keypress" keycode="vk_down" modifiers="alt" phase="capturing" action="return this.openmenupopup();"/>
        <handler event="keypress" keycode="vk_up"   modifiers="alt" phase="capturing" action="return this.openmenupopup();"/>

#ifndef XP_MACOSX
      <handler event="keypress" keycode="vk_f4" phase="capturing" action="return this.openmenupopup();"/>
#endif

      <handler event="dragdrop" phase="capturing">
        nsDragAndDrop.drop(event, this.searchInputDNDObserver);
      </handler>
    </handlers>
  </binding>
  
  <binding id="searchBarDropMarker">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    <content popup="_child">
      <children/>
      <xul:stack flex="1">
        <xul:hbox align="center">
          <xul:image class="quick-search-button-image" xbl:inherits="src"/>
        </xul:hbox>
        <xul:hbox align="center">
          <xul:image class="quick-search-button-dropmarker"/>
        </xul:hbox>
      </xul:stack>
    </content>  
  </binding>

</bindings>
