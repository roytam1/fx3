# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the Mozilla Browser code.
#
# The Initial Developer of the Original Code is
# Benjamin Smedberg <bsmedberg@covad.net>
# Portions created by the Initial Developer are Copyright (C) 2004
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH           = ../..
topsrcdir       = @top_srcdir@
srcdir          = @srcdir@
VPATH           = @srcdir@
relativesrcdir  = mail/locales

include $(DEPTH)/config/autoconf.mk

include $(topsrcdir)/config/config.mk

run_for_effect := $(shell if ! test -d $(DIST); then $(NSINSTALL) -D $(DIST); fi; if ! test -d $(DIST)/branding; then $(NSINSTALL) -D $(DIST)/branding; fi)
_ABS_DIST := $(shell cd $(DIST) && pwd)

ifdef MOZ_BRANDING_DIRECTORY
SUBMAKEFILES += $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales/Makefile
endif

# This makefile uses variable overrides from the libs-% target to
# build non-default locales to non-default dist/ locations. Be aware!

AB = $(firstword $(subst -, ,$(AB_CD)))

APP_VERSION = $(shell cat $(srcdir)/../config/version.txt)

DEFINES += \
	-DAB_CD=$(AB_CD) \
	-DMOZ_LANGPACK_EID=langpack-$(AB_CD)@thunderbird.mozilla.org \
	-DMOZ_APP_VERSION=$(APP_VERSION) \
	-DLOCALE_SRCDIR=$(LOCALE_SRCDIR) \
	-DPKG_BASENAME=$(PKG_BASENAME) \
	$(NULL)

ifndef MOZ_BRANDING_DIRECTORY
DEFINES += -DMOZ_USE_GENERIC_BRANDING
endif

PREF_JS_EXPORTS = $(LOCALE_SRCDIR)/all-l10n.js

include $(topsrcdir)/config/rules.mk

ifeq ($(OS_ARCH),OS2)
README_FILES = \
	os2/README.txt \
	$(NULL)
else
README_FILES = \
	README.txt \
	$(NULL)
endif

libs:: $(addprefix $(LOCALE_SRCDIR)/,$(README_FILES))
	$(INSTALL) $^ $(FINAL_TARGET)

libs-%:
	@$(MAKE) -C ../../toolkit/locales libs-$*
	@$(MAKE) -C ../../editor/ui/locales AB_CD=$* XPI_NAME=locale-$*
	@$(MAKE) -C ../../extensions/spellcheck/locales AB_CD=$* XPI_NAME=locale-$*
	@$(MAKE) libs AB_CD=$* XPI_NAME=locale-$* PREF_DIR=defaults/pref
ifdef MOZ_BRANDING_DIRECTORY
	@$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales AB_CD=$* XPI_NAME=locale-$*
endif

ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
MOZ_PKG_MAC_DSSTORE=$(_ABS_DIST)/branding/dsstore
MOZ_PKG_MAC_BACKGROUND=$(_ABS_DIST)/branding/background.png
MOZ_PKG_MAC_ICON=$(_ABS_DIST)/branding/disk.icns
MOZ_PKG_MAC_RSRC=$(_ABS_DIST)/branding/license.r
endif

PACKAGER_NO_LIBS = 1
include $(topsrcdir)/toolkit/mozapps/installer/packager.mk
include $(call EXPAND_LOCALE_SRCDIR,toolkit/locales)/installer/windows/charset.mk

repackage-win32-installer: WIN32_INSTALLER_OUT=$(_ABS_DIST)/install/sea/$(PKG_BASENAME).installer.exe
repackage-win32-installer: $(WIN32_INSTALLER_IN)
	@echo "Repackaging $(WIN32_INSTALLER_IN) into $(WIN32_INSTALLER_OUT)."
	if ! test -d $(dir $(WIN32_INSTALLER_OUT)); then \
	  $(NSINSTALL) -D $(dir $(WIN32_INSTALLER_OUT)); \
	fi
	$(RM) -rf $(DIST)/l10n-stage
	mkdir $(DIST)/l10n-stage
	cd $(DIST)/l10n-stage && \
	  $(CYGWIN_WRAPPER) 7z e $(WIN32_INSTALLER_IN)
	$(RM) $(DIST)/l10n-stage/en-US.xpi
	$(RM) -rf $(DIST)/xpi-stage/locale-$(AB_CD)
	$(MAKE) libs-$(AB_CD)
	$(RM) -rf $(DIST)/l10n-temp-stage
	mkdir $(DIST)/l10n-temp-stage
	mv $(DIST)/xpi-stage/locale-$(AB_CD) $(DIST)/l10n-temp-stage/bin
	iconv -f UTF-8 -t $(WIN_INSTALLER_CHARSET) $(call EXPAND_LOCALE_SRCDIR,mail/locales)/installer/installer.inc > \
	  installer.inc
	$(PERL) $(topsrcdir)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) \
	  -I$(call EXPAND_LOCALE_SRCDIR,toolkit/locales)/installer/windows/install.it \
	  -Iinstaller.inc \
	  $(topsrcdir)/mail/installer/windows/install.it > install.it
	$(PERL) $(topsrcdir)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) \
	  $(topsrcdir)/mail/installer/windows/installer.cfg > installer.cfg
	$(PERL) $(topsrcdir)/toolkit/mozapps/installer/makeinstallini.pl \
	  installer.cfg install.it
	$(PERL) $(topsrcdir)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) \
	  $(topsrcdir)/mail/installer/windows/ab-CD.jst > $(AB_CD).jst
	$(PERL) $(topsrcdir)/toolkit/mozapps/installer/parseandmakejs.pl \
	  installer.cfg $(AB_CD).jst $(DIST)/l10n-temp-stage
	cp $(AB_CD).js $(DIST)/l10n-temp-stage/install.js
	cd $(DIST)/l10n-temp-stage && \
	  $(ZIP) -D -0 -r ../l10n-stage/$(AB_CD).xpi .
	$(SYSINSTALL) install.ini $(DIST)/l10n-stage
	cd $(DIST)/l10n-stage && \
	  $(CYGWIN_WRAPPER) 7z a -t7z ../l10n-temp-stage/app.7z *.* -mx -m0=BCJ2 -m1=LZMA:d24 -m2=LZMA:d19 -m3=LZMA:d19 -mb0:1 -mb0s1:2 -mb0s2:3
	$(CYGWIN_WRAPPER) upx --best -o $(DIST)/l10n-temp-stage/7zSD.sfxc $(topsrcdir)/other-licenses/7zstub/thunderbird/7zSD.sfx
	$(INSTALL) $(topsrcdir)/mail/installer/windows/app.tag $(DIST)/l10n-temp-stage
	cd $(DIST)/l10n-temp-stage && \
	  $(CYGWIN_WRAPPER) cmd /C copy /b 7zSD.sfxc+app.tag+app.7z thunderbird-installer.exe
	mv -f $(DIST)/l10n-temp-stage/thunderbird-installer.exe $(WIN32_INSTALLER_OUT)

repackage-win32-installer-%: WIN32_INSTALLER_IN=$(_ABS_DIST)/install/sea/$(PKG_BASENAME).installer.exe
repackage-win32-installer-%: $(WIN32_INSTALLER_IN)
	@$(MAKE) repackage-win32-installer AB_CD=$* WIN32_INSTALLER_IN=$(WIN32_INSTALLER_IN)

ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/MacOS
else
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)
endif

repackage-zip: ZIP_OUT=$(_ABS_DIST)/$(PACKAGE)
repackage-zip: UNPACKAGE=$(ZIP_IN)
repackage-zip: $(ZIP_IN)
	$(RM) -r $(DIST)/l10n-stage
	mkdir $(DIST)/l10n-stage
	cd $(DIST)/l10n-stage && \
	  $(UNMAKE_PACKAGE)
	$(RM) $(STAGEDIST)/chrome/en-US.jar \
	  $(STAGEDIST)/chrome/en-US.manifest \
	  $(STAGEDIST)/defaults/pref/all-l10n.js
	$(RM) -r $(STAGEDIST)/searchplugins \
	  $(STAGEDIST)/chrome/en-US
	$(RM) -rf $(DIST)/xpi-stage/locale-$(AB_CD)
	$(MAKE) libs-$(AB_CD)
	$(RM) -r $(DIST)/xpi-stage/locale-$(AB_CD)/chrome/$(AB_CD)
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  tar $(TAR_CREATE_FLAGS) - * | ( cd $(STAGEDIST) && tar -xf - )
ifneq (en,$(AB))
ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj
endif
endif
	cd $(DIST)/l10n-stage; \
	  $(MAKE_PACKAGE)
	mv -f $(DIST)/l10n-stage/$(PACKAGE) $(DIST)

repackage-zip-%: ZIP_IN=$(_ABS_DIST)/$(PACKAGE)
repackage-zip-%: $(ZIP_IN)
	@$(MAKE) repackage-zip AB_CD=$* ZIP_IN=$(ZIP_IN)

langpack-%: LANGPACK_FILE=$(_ABS_DIST)/install/thunderbird-$(MOZ_APP_VERSION).$(AB_CD).langpack.xpi
langpack-%: AB_CD=$*
langpack-%: XPI_NAME=locale-$*
langpack-%:
	@echo "Making langpack $(LANGPACK_FILE)"
	@$(RM) -rf $(DIST)/xpi-stage/locale-$(AB_CD)
	$(NSINSTALL) -D $(_ABS_DIST)/install
	@$(MAKE) libs-$(AB_CD) USE_EXTENSION_MANIFEST=1
	$(PERL) $(topsrcdir)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) \
	  -I$(call EXPAND_LOCALE_SRCDIR,toolkit/locales)/defines.inc \
	  -I$(LOCALE_SRCDIR)/defines.inc $(srcdir)/generic/install.rdf > \
	  $(FINAL_TARGET)/install.rdf
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  $(ZIP) -r9D $(LANGPACK_FILE) install.rdf chrome chrome.manifest

# This is a generic target that will make a langpack, repack ZIP (tarball)
# builds, and repack and installer if applicable. It is called from the
# tinderbox scripts. Alter it with caution.
#
# Note: the last target called here should be repackage-zip-$* as the l10n build
# systems rely on dist/l10n-stage/<product> to be in place in order to package
# the complete MAR files.

installers-%:
	@$(MAKE) langpack-$*
ifeq (WINNT,$(OS_ARCH))
	@$(MAKE) repackage-win32-installer-$*
endif
	@$(MAKE) repackage-zip-$*

ifdef MOZ_UPDATER
libs:: $(addprefix $(LOCALE_SRCDIR)/,updater/updater.ini)
ifeq ($(OS_ARCH),WINNT)
	iconv -f UTF-8 -t $(WIN_INSTALLER_CHARSET) $< > $(FINAL_TARGET)/updater.ini
else
ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
	$(INSTALL) $^ $(FINAL_TARGET)/updater.app/Contents/MacOS
else
	$(INSTALL) $^ $(FINAL_TARGET)
endif
endif
endif
