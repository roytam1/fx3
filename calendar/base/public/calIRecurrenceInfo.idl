/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is
 *  Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic <vladimir.vukicevic@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface calIItemBase;
interface calIDateTime;

interface calIRecurrenceItem;

interface calIIcalProperty;

[scriptable, uuid(8ca5db89-2583-4f0c-b845-4a6d2f229efd)]
interface calIRecurrenceInfo : nsISupports
{
  // returns true if this thing is able to be modified;
  // if the item is not mutable, attempts to modify
  // any data will throw CAL_ERROR_ITEM_IS_IMMUTABLE
  readonly attribute boolean isMutable;

  // makes this item immutable
  void makeImmutable();

  // clone always returns a mutable event
  calIRecurrenceInfo clone();

  // initialize this with the item for which this recurrence
  // applies, so that the start date can be tracked
  attribute calIItemBase item;

  /**
   * The start date of an item is directly referenced by parts of calIRecurrenceInfo,
   * thus changing the former without adjusting the latter would break the internal structure.
   * This method provides the necessary functionality. There's no need to call it manually
   * after writing to the start date of an item, since it's called automatically in the
   * appropriate setter of an item.
   */
  void onStartDateChange (in calIDateTime aNewStartTime, in calIDateTime aOldStartTime);

  /*
   * Set of recurrence items; the order of these matters.
   */

  void getRecurrenceItems (out unsigned long aCount, [array,size_is(aCount),retval] out calIRecurrenceItem aItems);
  void setRecurrenceItems (in unsigned long aCount, [array,size_is(aCount)] in calIRecurrenceItem aItems);

  unsigned long countRecurrenceItems ();
  void clearRecurrenceItems ();
  void appendRecurrenceItem (in calIRecurrenceItem aItem);

  calIRecurrenceItem getRecurrenceItemAt (in unsigned long aIndex);
  void deleteRecurrenceItemAt (in unsigned long aIndex);
  void deleteRecurrenceItem (in calIRecurrenceItem aItem);
  // inserts the item at the given index, pushing the item that was previously there forward
  void insertRecurrenceItemAt (in calIRecurrenceItem aItem, in unsigned long aIndex);

  /**
   * isFinite is true if the recurrence items specify a finite number
   * of occurrences.  This is useful for UI and for possibly other users.
   */
  readonly attribute boolean isFinite;

  /**
   * This is a shortcut to appending or removing a single negative
   * date assertion.  This shortcut may or may not cause problems
   * later on, but hey, that's fixable later!
   */
  void removeOccurrenceAt (in calIDateTime aRecurrenceId);
  void restoreOccurrenceAt (in calIDateTime aRecurrenceId);

  /*
   * exceptions
   */

  /**
   * Modify an a particular occurrence with the given exception proxy
   * item.  If the recurrenceId isn't an already existing exception item,
   * a new exception is added.  Otherwise, the existing exception
   * is modified.
   *
   * The item's parentItem must be equal to this RecurrenceInfo's
   * item. <-- XXX check this, compare by calendar/id only
   */
  void modifyException (in calIItemBase anItem);

  /**
   * Return an existing exception item for the given recurrence ID.
   * If an exception does not exist, and aCreate is set, a new one
   * is created and returned.  Otherwise, null is returned.
   */
  calIItemBase getExceptionFor (in calIDateTime aRecurrenceId, in boolean aCreate);

  /**
   * Removes an exception item for the given recurrence ID, if
   * any exist.
   */
  void removeExceptionFor (in calIDateTime aRecurrenceId);

  /**
   * Returns a list of all recurrence ids that have exceptions.
   */
  void getExceptionIds (out unsigned long aCount, [array,size_is(aCount),retval] out calIDateTime aIds);

  /*
   * recurrence calculation
   */

  /*
   * Get the occurrence at the given recurrence ID; if there is no
   * exception, then create a new proxy object with the normal occurrence.
   * Otherwise, return the exception.
   */
  calIItemBase getOccurrenceFor (in calIDateTime aRecurrenceId);

  /**
   * Return the next start calIDateTime of the recurrence specified by
   * this RecurrenceInfo, after aOccurrenceTime.
   */
  calIDateTime getNextOccurrenceDate (in calIDateTime aOccurrenceTime);

  /**
   * Return the next item specified by this RecurrenceInfo, after aOccurrenceTime.
   */
  calIItemBase getNextOccurrence (in calIDateTime aOccurrenceTime);

  /**
   * Return an array of calIDateTime representing all start times of this event
   * between start (inclusive) and end (non-inclusive).
   */
  void getOccurrenceDates (in calIDateTime aRangeStart,
                           in calIDateTime aRangeEnd,
                           in unsigned long aMaxCount,
                           out unsigned long aCount, [array,size_is(aCount),retval] out calIDateTime aDates);

  /**
   * Return an array of calIItemBase representing all
   * occurrences of this event between start (inclusive) and end (non-inclusive).
   */
  void getOccurrences (in calIDateTime aRangeStart,
                       in calIDateTime aRangeEnd,
                       in unsigned long aMaxCount,
                       out unsigned long aCount, [array,size_is(aCount),retval] out calIItemBase aItems);
};
