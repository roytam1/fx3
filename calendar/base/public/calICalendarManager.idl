/* -*- Mode: javascript; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Stuart Parmenter <stuart.parmenter@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface calICalendar;
interface nsIURI;

interface calICalendarManagerObserver;

[scriptable, uuid(43a71d40-7807-4e2f-b741-2926ee73f89a)]
interface calICalendarManager : nsISupports
{
  /* 
   * create a new calendar
   * aType is the type ("caldav", "storage", etc)
   */
  calICalendar createCalendar(in AUTF8String aType, in nsIURI aURL);

  /* register a newly created calendar with the calendar service */
  void registerCalendar(in calICalendar aCalendar);

  /* unregister a calendar */
  void unregisterCalendar(in calICalendar aCalendar);

  /* delete a calendar for good */
  void deleteCalendar(in calICalendar aCalendar);

  /* return a list of all calendars currently registered */
  void getCalendars(out PRUint32 count,
                    [array, size_is(count), retval] out calICalendar aCalendars);


  /* name will be forced to lowercase */
  AUTF8String getCalendarPref(in calICalendar aCalendar, in AUTF8String aName);
  void setCalendarPref(in calICalendar aCalendar, in AUTF8String aName, in AUTF8String aValue);
  void deleteCalendarPref(in calICalendar aCalendar, in AUTF8String aName);

  void addObserver(in calICalendarManagerObserver aObserver);
  void removeObserver(in calICalendarManagerObserver aObserver);
};

[scriptable, uuid(383f36f1-e669-4ca4-be7f-06b43910f44a)]
interface calICalendarManagerObserver : nsISupports
{
  // called after the calendar is registered
  void onCalendarRegistered(in calICalendar aCalendar);

  // called before the unregister actually takes place
  void onCalendarUnregistering(in calICalendar aCalendar);

  // called before the delete actually takes place
  void onCalendarDeleting(in calICalendar aCalendar);

  // called after the pref is set
  void onCalendarPrefSet(in calICalendar aCalendar, in AUTF8String aName, in AUTF8String aValue);

  // called before the pref is deleted
  void onCalendarPrefDeleting(in calICalendar aCalendar, in AUTF8String aName);
};
