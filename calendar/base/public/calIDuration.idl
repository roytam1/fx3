/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Stuart Parmenter <stuart.parmenter@oracle.com>
 *   Dan Mosedale <dan.mosedale@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[ptr] native icaldurationtypeptr(struct icaldurationtype);

[scriptable, uuid(d1d2e05d-5472-482e-b0a4-a9e43925d530)]
interface calIDuration : nsISupports
{
  /**
   * isMutable is true if this instance is modifiable.
   * If isMutable is false, any attempts to modify
   * the object will throw CAL_ERROR_ITEM_IS_MUTABLE.
   */
  readonly attribute boolean isMutable;

  /**
   * Make this calIDuration instance immutable.
   */
  void makeImmutable();

  /**
   * Clone this calIDuration instance into a new
   * mutable object.
   */
  calIDuration clone();

  /**
   * Is Negative
   */
  attribute boolean isNegative;

  /**
   * Weeks
   */
  attribute short weeks;

  /**
   * Days
   */
  attribute short days;

  /**
   * Hours
   */
  attribute short hours;

  /**
   * Minutes
   */
  attribute short minutes;

  /**
   * Seconds
   */
  attribute short seconds;

  /**
   * total duration in seconds
   */
  attribute long inSeconds;

  /*
   * Methods
   */

  /**
   * Add a duration
   */
  void addDuration(in calIDuration aDuration);

  /**
   * Compare with another duration
   *
   * @param    aOther     to be compared with this object
   * 
   * @return   -1, 0, 1 if this < aOther, this == aOther, or this > aOther,
   *           respectively.
   */
  long compare(in calIDuration aOther);

  /**
   * Reset this duration to 0
   */
  void reset();

  /**
   * Normalize the duration
   */
  void normalize();

  /**
   * Return a string representation of this instance.
   */
  AUTF8String toString();

  [noscript,notxpcom] void toIcalDuration(in icaldurationtypeptr idt);

  /**
   * This object as an iCalendar DURATION string
   */
  attribute ACString icalString;
};
