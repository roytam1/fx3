/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Oracle Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): 
 *   Dan Mosedale <dan.mosedale@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIURI;
interface calICalendar;
interface nsIVariant;
interface calIProviderListener;

/**
 * High-level interface to allow providers to be plugable.
 */
[scriptable, uuid(30e22db4-9f13-11d9-80d6-000b7d081f44)]
interface calICalendarProvider : nsISupports
{
  /**
   * XUL overlay for configuring a calendar of this type.
   */
  readonly attribute nsIURI prefChromeOverlay;

  /**
   * The way to refer to this provider in UI for the end-user
   * (eg "Shared ICS File").
   */
  readonly attribute AUTF8String displayName;

  /**
   * Create a new empty calendar. This will typically create a new empty
   * file, and then call getCalendar()
   *
   * @param aName      the display name of the calendar to be created
   * @param aURL       URL of the calendar to be created.
   * @param aListener  where to call the results back to
   */
  void createCalendar(in AUTF8String aName, in nsIURI aURL,
                      in calIProviderListener aListener);

  /**
   * Delete a calendar. Deletes the actual underlying calendar, which
   * could be (for example) a file or a calendar on a server
   * 
   * @param aCalendar   the calendar to delete
   * @param aListener   where to call the results back to
   */
  void deleteCalendar(in calICalendar aCalendar,
                      in calIProviderListener aListener);

  /**
   * Get a new calendar object with existing calendar data
   *
   * @param aURL       URL of the calendar to be created.
   */
  calICalendar getCalendar(in nsIURI aURL);
};

[scriptable, uuid(0eebe99e-a22d-11d9-87a6-000b7d081f44)]
interface calIProviderListener : nsISupports
{
  /**
   * @param aStatus         status code summarizing what happened
   * @param aDetail         not yet fully specified.  If aStatus is an error
   *                        result, this will probably be an extended error
   *                        string (eg one returned by a server).
   */
  void onCreateCalendar(in calICalendar aCalendar, in nsresult aStatus, 
                        in nsIVariant aDetail);

  /**
   * @param aStatus         status code summarizing what happened
   * @param aDetail         not yet fully specified.  If aStatus is an error
   *                        result, this will probably be an extended error
   *                        string (eg one returned by a server).
   */
  void onDeleteCalendar(in calICalendar aCalendar, in nsresult aStatus,
                        in nsIVariant aDetail);
};

