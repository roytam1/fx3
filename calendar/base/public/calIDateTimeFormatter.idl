/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla calendar code.
 *
 * The Initial Developer of the Original Code is
 *  Michiel van Leeuwen <mvl@exedo.nl>
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface calIDateTime;

[scriptable, uuid(17101743-f016-4fb2-90dd-0c043aa44579)]
interface calIDateTimeFormatter : nsISupports
{
    /**
     * Format a date in either short or long format, depending on the
     * users preference
     *
     * @see
     *     formatDateShort
     *     formatDateLong
     */
    AString formatDate(in calIDateTime aDate);

    /**
     * Format a date into a short format, for example
     * "12/17/2005"
     *
     * @param aDate
     *      the datetime to format
     * @returns
     *      a string representing the date part of the datetime
     */
    AString formatDateShort(in calIDateTime aDate);

    /**
     * Format a date into a long format, for example
     * "Sat Dec 17 2005"
     *
     * @param aDate
     *      the datetime to format
     * @returns
     *      a string representing the date part of the datetime
     */
    AString formatDateLong(in calIDateTime aDate);

    /**
     * Format a date into a short format without mentioning the year, for
     * example "Dec 17"
     *
     * @param aDate
     *      the datetime to format
     * @returns
     *      a string representing the date part of the datetime
     */
    AString formatDateWithoutYear(in calIDateTime aDate);

    /**
     * Format a time into the format specified by the OS settings.
     * Will omit the seconds from the output.
     *
     * @param aDate
     *      the datetime to format
     * @returns
     *      a string representing the time part of the datetime
     */
    AString formatTime(in calIDateTime aDate);

    /**
     * Format a datetime into the format specified by the OS settings.
     * Will omit the seconds from the output.
     *
     * @param aDateTime
     *      the datetime to format
     * @returns
     *      a string representing the datetime
     */
    AString formatDateTime(in calIDateTime aDate);

    /**
     * Format a time interval. May assume that both out strings are displayed
     * close to each other, so that it can leave out the date part of the
     * end string (when applicable)
     *
     * @param aStartDate
     *      The start of the interval
     * @param aEndDate
     *      The end of the interval
     * @param aStartString
     *      A string representing the start of the interval
     * @param aEndString
     *      A string representing the end of the interval. May leave out
     *      parts already in aStartString.
     */
    // XXX using wstring instead of AString, because AString as outparam
    //     seems to fail in javascript.
    void formatInterval(in calIDateTime aStartDate,
                        in calIDateTime aEndDate,
                        out wstring aStartString,
                        out wstring aEndString);

    /**
     * Get the month name
     *
     * @param aMonthIndex
     *     zero-based month number (0 is january, 11 is december)
     * @returns
     *      the month name in the current locale
     */
    AString monthName(in unsigned long aMonthIndex);

    /**
     * Get the abbrevation of the month name
     *
     * @see monthName
     */
    AString shortMonthName(in unsigned long aMonthIndex);

    /**
     * Get the day name
     * @param aMonthIndex
     *     zero-based month number (0 is sunday, 6 is saturday)
     * @returns
     *      the day name in the current locale
     */
    AString dayName(in unsigned long aDayIndex);

    /**
     * Get the abbrevation of the day name
     * @see dayName
     */
    AString shortDayName(in unsigned long aDayIndex);
};
