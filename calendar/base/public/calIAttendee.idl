/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is
 *  Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mike Shaver <shaver@off.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface calIIcalProperty;
interface nsISimpleEnumerator;

[scriptable,uuid(5d1f2c7c-29bb-4090-94c2-cabe278fe567)]
interface calIAttendee : nsISupports
{
  readonly attribute boolean isMutable;

  // makes this item immutable
  void makeImmutable();

  // clone always returns a mutable event
  calIAttendee clone();

  attribute AUTF8String id;
  attribute AUTF8String commonName;
  attribute boolean     rsvp;

  /** 
   * If true, indicates that this is not a standard attendee, but rather this
   * icalProperty corresponds to the organizer of the event (rfc2445 Sec 4.8.4.3)
   */
  attribute boolean isOrganizer;

  /**
   * CHAIR
   * REQ-PARTICIPANT
   * OPT-PARTICIPANT
   * NON-PARTICIPANT
   */
  attribute AUTF8String    role;

  /**
   * NEEDS-ACTION
   * ACCEPTED
   * DECLINED
   * TENTATIVE
   * DELEGATED
   * COMPLETED
   * IN-PROCESS
   */
  attribute AUTF8String    participationStatus;

  /**
   * INDIVIDUAL
   * GROUP
   * RESOURCE
   * ROOM
   * UNKNOWN
   */
  attribute AUTF8String    userType;

  readonly attribute nsISimpleEnumerator propertyEnumerator;
  AUTF8String getProperty(in AString name);
  void setProperty(in AString name, in AUTF8String value);
  void deleteProperty(in AString name);

  attribute calIIcalProperty icalProperty;
};
