<?xml version="1.0"?>
<!--
   - ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Calendar view code.
   -
   - The Initial Developer of the Original Code is
   -   Joey Minta <jminta@gmail.com>
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
-->

<bindings id="calendar-specific-view-bindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="calendar-decorated-month-view" extends="chrome://calendar/content/calendar-decorated-base.xml#calendar-decorated-base-view">
        <content>
             <xul:vbox anonid="main-box" flex="1">
                <xul:calendar-navigation-buttons anonid="nav-control" />
                <xul:box style="overflow: auto;" flex="1">
                    <xul:calendar-month-view anonid="view-element" flex="1" xbl:inherits="context,item-context"/>
                </xul:box>
            </xul:vbox>
        </content>

        <implementation implements="calIDecoratedView">
	    <constructor><![CDATA[
                var pb2 = Components.classes
                          ["@mozilla.org/preferences-service;1"]
                          .getService(Components.interfaces.nsIPrefBranch2);
                // Set the preference for the default start of the week
                viewElem = document.getAnonymousElementByAttribute(
                             this, "anonid", "view-element");
                try {
                    viewElem.weekStartOffset = pb2.getIntPref("calendar.week.start");
                } catch (ex) {}

                this.updateDaysOffPrefs();

                // add a preference observer to monitor changes
                pb2.addObserver("calendar.", this.mPrefObserver, false);
                return;
            ]]></constructor>

            <destructor><![CDATA[
                var pb2 = Components.classes
                          ["@mozilla.org/preferences-service;1"]
                          .getService(Components.interfaces.nsIPrefBranch2);
                pb2.removeObserver("calendar.", this.mPrefObserver);
                return;
            ]]></destructor>

            <field name="mPrefObserver"><![CDATA[
            ({ calView: this,
               observe: function calDecWeekViewPrefChange(subj, topic, pref) {

                   subj.QueryInterface(Components.interfaces.nsIPrefBranch2);

                   switch (pref) {

                   case "calendar.previousweeks.inview":
                   case "calendar.week.d0sundaysoff":
                   case "calendar.week.d1mondaysoff":
                   case "calendar.week.d2tuesdaysoff":
                   case "calendar.week.d3wednesdaysoff":
                   case "calendar.week.d4thursdaysoff":
                   case "calendar.week.d5fridaysoff":
                   case "calendar.week.d6saturdaysoff":
                       this.calView.updateDaysOffPrefs();
                       if (this.calView.selectedDay) {
                           this.calView.goToDay(this.calView.selectedDay);
                       }
                       break;

                   case "calendar.week.start":
                       viewElem = document.getAnonymousElementByAttribute(
                                  this.calView, "anonid", "view-element");
                       viewElem.weekStartOffset = subj.getIntPref(pref);

                       if (!this.calView.startDay || !this.calView.endDay) {
                           // Don't refresh if we're not initialized
                           return;
                       }
                       
                       // Refresh the view so the settings take effect
                       this.calView.goToDay(this.calView.selectedDay);
                       break;
                   case "calendar.timezone.local":
                       var viewElem = document.getAnonymousElementByAttribute(
                                      this.calView, "anonid", "view-element");
                       viewElem.timezone = subj.getCharPref(pref);
                       if (!this.calView.startDay || !this.calView.endDay) {
                           // Don't refresh if we're not initialized
                           return;
                       }
                       this.calView.goToDay(this.calView.selectedDay);
                       break;

                   default:
                       break;
                   }
                   return;
               }
            })
	    ]]></field>

            <property name="observerID">
                <getter><![CDATA[
                    return "month-view-observer";
                ]]></getter>
            </property>

            <!--Public methods-->
            <method name="goToDay">
                <parameter name="aDate"/>
                <body><![CDATA[
                    var viewElement = document.getAnonymousElementByAttribute(this, "anonid", "view-element");
	            viewElement.tasksInView = this.mTasksInView;
                    viewElement.displayDaysOff = !this.mWorkdaysOnly;

                    aDate = aDate.getInTimezone(viewElement.timezone);

                    viewElement.showDate(aDate);

                    if (this.mWorkdaysOnly) {
                        this.removeNonWorkdays();
                    }
                    this.setNavLabels(aDate);
                ]]></body>
            </method>

            <method name="moveView">
                <parameter name="aNumber"/>
                <body><![CDATA[
		    var monthViewElement = document.getAnonymousElementByAttribute(this, "anonid", "view-element");
                    var dates = monthViewElement.getDateList({});
                    monthViewElement.displayDaysOff = !this.mWorkdaysOnly;
		    
		    // The first few dates in this list are likely in the month
		    // prior to the one actually being shown (since the month
		    // probably doesn't start on a Sunday).  The 7th item must
		    // be in correct month though.
		    var date = dates[6].clone();
		    
		    date.month += aNumber;
		    date.normalize();

                    // Need to store this before we move
                    var oldSelectedDay = this.selectedDay;

		    this.goToDay(date);
		    
		    // Most of the time we want to select the date with the
		    // same day number in the next month
		    var newSelectedDay = oldSelectedDay.clone();
		    newSelectedDay.month += aNumber;
		    newSelectedDay.normalize();

		    // correct for accidental rollover into the next month
                    if ((newSelectedDay.month - aNumber + 12)%12 != oldSelectedDay.month) {
		        newSelectedDay.month -= 1;
			newSelectedDay.day = newSelectedDay.endOfMonth.day;
			newSelectedDay.normalize();
		    }

		    monthViewElement.selectedDay = newSelectedDay;
                ]]></body>
            </method>

            <method name="setNavLabels">
                <parameter name="aDate"/>
                <body><![CDATA[
                    var sbs = Components.classes["@mozilla.org/intl/stringbundle;1"]
                                        .getService(Components.interfaces.nsIStringBundleService);
                    var props = sbs.createBundle("chrome://calendar/locale/dateFormat.properties");
                    var nameArray = new Array();
                    for (var i = -2; i < 3; i++) {
                        var index = ((aDate.month + i + 12) % 12) + 1;
                        if (0 == i) {
                            nameArray.push(props.GetStringFromName("month."+index+".name") + " " + aDate.year);
                        } else {
                            nameArray.push(props.GetStringFromName("month."+index+".name"));
                        }
                    }
                    document.getAnonymousElementByAttribute(this, "anonid", "nav-control").setNames(nameArray);
                ]]></body>
            </method>
            <method name="removeNonWorkdays">
                <body><![CDATA[
                    // Not supported yet
                    return;
                ]]></body>
            </method>

            <method name="updateDaysOffPrefs">
                <body><![CDATA[
                    try {
                        var prefService = Components.classes[
                                          "@mozilla.org/preferences-service;1"]
                                          .getService(Components.interfaces.nsIPrefService);
                        var weekBranch = prefService.getBranch("calendar.week.");
                        var prefNames = ["d0sundaysoff", "d1mondaysoff", "d2tuesdaysoff",
                                         "d3wednesdaysoff", "d4thursdaysoff",
                                         "d5fridaysoff", "d6saturdaysoff"];
                        var daysOff = new Array();
                        for (var i in prefNames) {
                            if (weekBranch.getBoolPref(prefNames[i])) {
                                daysOff.push(Number(i));
                            }
                        }
                        viewElem = document.getAnonymousElementByAttribute(
                                            this, "anonid", "view-element");

                        viewElem.daysOffArray = daysOff;
                    } catch (ex) {}
                ]]></body>
            </method>
        </implementation>
    </binding>
</bindings>
