<?xml version="1.0"?> 

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<?xul-overlay href="chrome://calendar/content/pref/prefBirdOverlay.xul"?>

<!DOCTYPE window [
   <!ENTITY % calendarPrefsOverlayDTD SYSTEM "chrome://calendar/locale/prefs.dtd" >
   %calendarPrefsOverlayDTD;
   <!ENTITY % calendarDTD SYSTEM "chrome://calendar/locale/">
   %calendarDTD;
]>

<dialog id="prefDialog"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	title="&prefWindow.title;"
	style="&prefWindow.size;"
	windowtype="mozilla:preferences"
	buttons="accept,cancel"
	onload="hPrefWindow.init();"
	ondialogaccept="return hPrefWindow.onOK(event);"
	ondialogcancel="return hPrefWindow.onCancel(event);"
	persist="width height screenX screenY"
	resizable="true">

<script type="application/x-javascript" src="chrome://calendar/content/pref/wsm.js"/>

<box ordinal="horizontal" flex="1">
	<box orient="vertical">
		<label value="&prefWindow.category;"/>
		<tree id="prefsTree"
			style="width: 13em;"
			flex="1"
			seltype="single"
			hidecolumnpicker="true"
			onselect="hPrefWindow.switchPage();">
			<treecols>
				<treecol id="categoryCol"
					flex="1"
					primary="true"
					hideheader="true"/>
			</treecols>
			<treechildren id="panelChildren"/>
		</tree>
	</box>
	<box orient="vertical" flex="1">
		<dialogheader id="header"/>
		<iframe id="panelFrame" name="panelFrame" style="width: 0px" flex="1"/>
	</box>
</box>

<separator/>


<script type="application/x-javascript"><![CDATA[
var _elementIDs = [];

var hPrefWindow = 
{
	
	// properties 
	queuedPanel : null,
	initialized : false,

	cancelHandlers : [],
	okHandlers     : [],

	contentFrameID : 'panelFrame',
	prefTreeID     : 'prefsTree',
	
	get prefTree() 
	{
		if (!this._prefTree) {
			this._prefTree = document.getElementById(this.prefTreeID);
		}
		return this._prefTree;
	},
	_prefTree : null,
 
	get contentFrame() 
	{
		if (!this._contentFrame) {
			this._contentFrame = document.getElementById(this.contentFrameID);
		}
		return this._contentFrame;
	},
	_contentFrame : null,
	
	get currentPanel() 
	{
		return this.contentFrame.getAttribute('tag') || this.contentFrame.getAttribute('src');
	},
  
	get wsm() 
	{
		if (!this._wsm) {
			this._wsm = new nsWidgetStateManager(this.contentFrameID);
			this._wsm.attributes = ['preftype', 'prefstring', 'prefattribute', 'disabled'];
		}
		return this._wsm;
	},
	_wsm : null,
 
	get pref() 
	{
		if (!this._pref) {
			this._pref = this.prefservice.getBranch(null);
		}
		return this._pref;
	},
	_pref : null,
	
	get defpref() 
	{
		if (!this._defpref) {
			this._defpref = this.prefservice.getDefaultBranch(null);
		}
		return this._defpref;
	},
	_defpref : null,
 
	get prefservice() 
	{
		if (!this._prefservice) {
			this._prefservice = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService);
		}
		return this._prefservice;
	},
	_prefservice : null,
    
	// initializing 
	init : function()
	{
		if (this.initialized) return;
		this.initialized = true;

		this.createResizer();

		if ('arguments' in window &&
			window.arguments.length &&
			window.arguments[0]) {
			this.contentFrame.setAttribute('src', window.arguments[0]);
			this.contentFrame.setAttribute('tag', window.arguments[0]);
		}
		else {
			var nodes = document.getElementsByAttribute('url', '*');
			this.contentFrame.setAttribute('src', nodes.length ? nodes[0].getAttribute('url') : 'about:blank' );
			this.contentFrame.setAttribute('tag', nodes.length ? nodes[0].getAttribute('url') : 'about:blank' );
		}


		var nullPointer;
		nullPointer = this.wsm;
		nullPointer = this.pref;


		if (this.queuedPanel)
			this.onPageLoad(this.queuedPanel);

		if ('arguments' in window &&
			window.arguments.length > 2 &&
			window.arguments[1])
			this.openBranch(window.arguments[1], window.arguments[2]);

		window.hPrefWindow = this;
	},
	createResizer : function()
	{
		if (document.documentElement.getAttribute('resizable') != 'true')
			return;

		var box = document.getAnonymousElementByAttribute(document.documentElement, 'anonid', 'buttons');
		if (
			box.getAttribute('align') &&
			box.getAttribute('align') != 'right' &&
			box.getAttribute('pack') &&
			box.getAttribute('pack') != 'end'
			) {
			box = box.appendChild(document.createElement('box'));
			box.setAttribute('flex', 1);
			box.setAttribute('align', 'end');
			box.setAttribute('pack', 'end');
		}
		box.appendChild(document.createElement('resizer'));
		box.lastChild.setAttribute('dir', 'bottomright');
		box.lastChild.setAttribute('resizerdirection', 'bottomright');
	},
 
	// preferences 
	
	savePrefs : function() 
	{
		var panel,
			pageData,
			elementID,
			itemObject,
			attr,
			value;

		for (var panel in this.wsm.dataManager.pageData)
		{
			pageData = this.wsm.dataManager.getPageData(panel);
			if (!('initialized' in pageData) || !pageData.initialized) continue;

			for (elementID in pageData)
			{
				if (elementID == 'initialized') continue;

				itemObject = pageData[elementID];
				if (typeof itemObject != 'object') break;

				if (!('prefstring' in itemObject) ||
					!itemObject.prefstring) continue;

				attr = itemObject.prefattribute;
				if (!attr)
					switch(itemObject.localname)
					{
						case 'radiogroup':
						case 'textbox':
						case 'menulist':
							attr = 'value';
							break;
						case 'checkbox':
							attr = 'checked';
							break
						case 'button':
							attr = 'disabled';
							break;
						default:
							continue;
					}

				value = itemObject[attr];

				switch(itemObject.preftype || itemObject.localname)
				{
					case 'bool':
					case 'checkbox':
					case 'button':
						if (typeof value == 'string')
							value = (value == 'true');
						break;
					case 'string':
					case 'textbox':
						if (typeof value != 'string')
							value = String(value);
						break;
					case 'int':
					case 'radiogroup':
					case 'menulist':
						value = parseInt(value);
						break;
					default:
						continue;
				}

				if(value != this.getPref(itemObject.prefstring))
					this.setPref(itemObject.prefstring, value);
			}
		}

		try {
			this.prefservice.savePrefFile(null);
		}
		catch(e) {
		}
	},
 
	getPref : function(aPrefstring, aDefaultFlag) 
	{
		try {
			var type = this.pref.getPrefType(aPrefstring);
			switch (type)
			{
				case this.pref.PREF_STRING:
					var nsISupportsString = ('nsISupportsWString' in Components.interfaces) ? Components.interfaces.nsISupportsWString : Components.interfaces.nsISupportsString;
					return aDefaultFlag ? this.defpref.getComplexValue(aPrefstring, nsISupportsString).data : this.pref.getComplexValue(aPrefstring, nsISupportsString).data;
				case this.pref.PREF_INT:
					return aDefaultFlag ? this.defpref.getIntPref(aPrefstring) : this.pref.getIntPref(aPrefstring);
				default:
					return aDefaultFlag ? this.defpref.getBoolPref(aPrefstring) : this.pref.getBoolPref(aPrefstring);
			}
		}
		catch(e) {
		}

		return null;
	},
 
	setPref : function(aPrefstring, aNewValue) 
	{
		var type;
		try {
			type = typeof aNewValue;
		}
		catch(e) {
			type = null;
		}

		switch (type)
		{
			case 'string':
				var nsISupportsString = ('nsISupportsWString' in Components.interfaces) ? Components.interfaces.nsISupportsWString : Components.interfaces.nsISupportsString;
				var string = ('@mozilla.org/supports-wstring;1' in Components.classes) ?
						Components.classes['@mozilla.org/supports-wstring;1'].createInstance(nsISupportsString) :
						Components.classes['@mozilla.org/supports-string;1'].createInstance(nsISupportsString) ;
				string.data = String(aNewValue);
				this.pref.setComplexValue(aPrefstring, nsISupportsString, string);
				break;
			case 'number':
				this.pref.setIntPref(aPrefstring, parseInt(aNewValue));
				break;
			default:
				this.pref.setBoolPref(aPrefstring, Boolean(aNewValue));
				break;
		}
	},
  
	onOK : function() 
	{
		this.wsm.savePageData(this.currentPanel);

		for (var i = 0; i < this.okHandlers.length; i++)
		{
			try {
				this.okHandlers[i]();
			}
			catch(e) {
			}
		}

		this.savePrefs();
	},
	
	registerOKCallbackFunc : function(aFunc) 
	{
		this.okHandlers[this.okHandlers.length] = aFunc;
	},
  
	onCancel : function() 
	{
		for (var i = 0; i < this.cancelHandlers.length; i++)
		{
			try {
				this.cancelHandlers[i]();
			}
			catch (e) {
			}
		}
	},
	
	registerCancelCallbackFunc : function(aFunc) 
	{
		this.cancelHandlers[this.cancelHandlers.length] = aFunc;
	},
  
	switchPage : function() 
	{
		var selectedItem = this.prefTree.contentView.getItemAtIndex(this.prefTree.currentIndex);

		this.wsm.savePageData(this.currentPanel);

		var newPanel = selectedItem.firstChild.firstChild.getAttribute('url');
		var newTag = selectedItem.firstChild.firstChild.getAttribute('tag');
		if (newPanel == this.currentPanel) return;

		this.contentFrame.setAttribute('src', newPanel);

		if (!newTag)
			this.contentFrame.removeAttribute('tag');
		else
			this.contentFrame.setAttribute('tag', newTag);
	},
 
	onPageLoad : function(aPanelURL) 
	{
		var doc = this.contentFrame.contentDocument;

		var header = document.getElementById('header');
		header.setAttribute('title', doc.documentElement.getAttribute('headertitle'));

		if(!(aPanelURL in this.wsm.dataManager.pageData)) {
			var prefElements = doc.getElementsByAttribute('prefstring', '*'),
				root;
			this.wsm.dataManager.pageData[aPanelURL] = [];
			for (var i = 0; i < prefElements.length; i++)
			{
				root = this.wsm.dataManager.getItemData(aPanelURL, prefElements[i].getAttribute('id'));
				root.localname  = prefElements[i].localName;
				root.prefstring = prefElements[i].getAttribute('prefstring');

				root.preftype = prefElements[i].getAttribute('preftype');
				if (!root.preftype)
					switch(root.localname)
					{
						case 'textbox':
							root.preftype = 'string';
							break;
						case 'checkbox':
						case 'button':
							root.preftype = 'bool';
							break;
						case 'radiogroup':
						case 'menulist':
							root.preftype = 'int';
							break;
						default:
							break;
					}

				root.prefattribute = prefElements[i].getAttribute('prefattribute');
				if (!root.prefattribute)
					switch(root.localname)
					{
						case 'radiogroup':
						case 'textbox':
						case 'menulist':
							prefattribute = 'value';
							break;
						case 'checkbox':
							prefattribute = 'checked';
							break;
						case 'button':
							prefattribute = 'disabled';
							break;
						default:
							break;
					}

				root[prefattribute] = this.getPref(root.prefstring);
				if (root[prefattribute] === null)
					root[prefattribute] = prefElements[i].getAttribute('prefdefval');

				if (this.pref.prefIsLocked(root.prefstring))
					root.disabled = 'true';
			}
		}

		this.wsm.setPageData(aPanelURL);
		if ('Startup' in doc.defaultView) doc.defaultView.Startup();

		this.wsm.dataManager.pageData[aPanelURL].initialized = true;
	},
 
	openBranch : function(aComponentName, aSelectItem) 
	{
		var selectItem     = document.getElementById(aSelectItem);
		var selectItemroot = document.getElementById(aComponentName);
		var parentIndex    = this.prefTree.contentView.getIndexOfItem(selectItemroot);

		if (parentIndex != -1 && !this.prefTree.view.isContainerOpen(parentIndex))
			this.prefTree.view.toggleOpenState(parentIndex);

		var index = this.prefTree.view.getIndexOfItem(selectItem);
		if (index != -1)
			this.prefTree.view.selection.select(index);
	}
  
}; 
 
function initPanel(aPanelURL) 
{
	if (hPrefWindow.initialized)
		hPrefWindow.onPageLoad(aPanelURL);
	else
		hPrefWindow.queuedPanel = aPanelURL;
}
 
]]></script>

</dialog>
