/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim:set ts=2 sw=2 sts=2 et cindent: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Metrics extension.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Darin Fisher <darin@meer.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIPropertyBag;

[scriptable, uuid(30cad119-e248-4211-9682-8f95efe995c4)]
interface nsIMetricsService : nsISupports
{
  /**
   * Logs an event using the given namespace.  The event is recorded with a
   * timestamp generated at the time at which this method is called.
   *
   * @param eventNS
   *        The namespace of the event, which must be a valid XML namespace
   *        URI.
   * @param eventName
   *        The name of the event, which must be a valid XML tag name.
   * @param eventValues
   *        A PropertyBag containing the key/value pairs to be included
   *        in the event.  JavaScript callers can simply pass in an object
   *        containing the key/value pairs as object properties.
   *        The "time" key is reserved for the event timestamp.
   */
  void logEvent(in DOMString eventNS, in DOMString event,
                in nsIPropertyBag eventValues);

  /**
   * Flush data to disk.
   */
  void flush();

  /**
   * Initiate the upload of the current event log.  This causes the current
   * event log to be truncated once the upload completes.
   */
  void upload();

  /**
   * Suspend log collection.  LogEvent calls will be silently ignored while log
   * collection is suspended.  For each call to suspend, resume must be called
   * to re-enable log collection.
   */
  void suspend();

  /**
   * Resume log collection.  Call this method once per call to suspend to
   * re-enable log collection.
   */
  void resume();
};
