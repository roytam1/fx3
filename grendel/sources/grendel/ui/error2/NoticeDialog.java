/*
 * NoticeDialog.java
 *
 * Created on 24 October 2005, 21:33
 */

package grendel.ui.error2;

import grendel.messaging.Notice;
import grendel.messaging.NoticeBoard;
import grendel.messaging.StringNotice;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.UIManager;

/**
 *
 * @author  hash9
 */
public class NoticeDialog extends javax.swing.JDialog implements grendel.messaging.Publisher {
    
    private List<Notice> notices = new ArrayList<Notice>();
    private int pos = 0;
    
    /** Creates new form NoticeDialog */
    public NoticeDialog() {
        super(iconJFrame(), false);
        initComponents();
    }
    
    private static JFrame iconJFrame() {
        JFrame f = new JFrame();
        f.setIconImage(new javax.swing.ImageIcon(NoticeDialog.class.getResource("/grendel/ui/error2/downloadOptions.png")).getImage());
        return f;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        txtTitle = new javax.swing.JLabel();
        srlExplain = new javax.swing.JScrollPane();
        txtExplain = new javax.swing.JEditorPane();
        srlNotice = new javax.swing.JScrollPane();
        txtNotice = new javax.swing.JEditorPane();
        pnlButtons = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Grendel Notice Board");
        setAlwaysOnTop(true);
        txtTitle.setFont(new java.awt.Font("Tahoma", 0, 18));
        txtTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/grendel/ui/error2/warning-large.png")));
        txtTitle.setText("Notice(s):");

        srlExplain.setBorder(null);
        txtExplain.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
        txtExplain.setEditable(false);
        txtExplain.setText("A notice or notices have been published. If you weren't expecting this message please file a bug quoting the contents of this dialog and what you were doing at the time.");
        txtExplain.setOpaque(false);
        srlExplain.setViewportView(txtExplain);

        txtNotice.setEditable(false);
        srlNotice.setViewportView(txtNotice);

        pnlButtons.setLayout(new java.awt.GridBagLayout());

        pnlButtons.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        pnlButtons.add(btnBack, gridBagConstraints);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        pnlButtons.add(btnClose, gridBagConstraints);

        btnForward.setText("Forward");
        btnForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        pnlButtons.add(btnForward, gridBagConstraints);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(txtTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .add(srlNotice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .add(srlExplain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlButtons, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(txtTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(srlNotice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(srlExplain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );
        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        pos--;
        select();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardActionPerformed
        pos++;
        select();
    }//GEN-LAST:event_btnForwardActionPerformed
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    public void dispose() {
        pos = 0;
        notices.clear();
        super.dispose();
    }
    
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NoticeBoard.getNoticeBoard().clearPublishers();
                NoticeBoard.getNoticeBoard().addPublisher(new NoticeDialog());
                NoticeBoard.getNoticeBoard().publish(new StringNotice("Hi\nThis is a Notice"));
            }
        });
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NoticeBoard.getNoticeBoard().publish(new StringNotice("Hi\nThis is a Notice\n2"));
                NoticeBoard.getNoticeBoard().publish(new StringNotice("Hi\nThis is a Notice\n3"));
                NoticeBoard.getNoticeBoard().publish(new StringNotice("Hi\nThis is a Notice\n4"));
            }
        });
    }
    
    public void setVisible(boolean b) {
        if (b) {
               select();
        }
        super.setVisible(b);
    }
    
    public void publish(Notice notice) {
        notices.add(notice);
        evaluateButtons();
        setVisible(true);
    }
    
    private void select() {
        txtNotice.setText(notices.get(pos).toString());
        txtTitle.setText("Notice: "+ (pos+1)+" ( / "+notices.size()+")");
        evaluateButtons();
    }
    
    private void evaluateButtons() {
        if (notices.size()>1) {
            if(pos==0) { 
                btnForward.setEnabled(true);
                btnBack.setEnabled(false);
            } else if (pos<(notices.size()-1)) {
                btnForward.setEnabled(true);
                btnBack.setEnabled(true);
            } else { 
                btnForward.setEnabled(false);
                btnBack.setEnabled(true);
            }
        } else {
            btnForward.setEnabled(false);
            btnBack.setEnabled(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnBack;
    public javax.swing.JButton btnClose;
    public javax.swing.JButton btnForward;
    public javax.swing.JPanel pnlButtons;
    public javax.swing.JScrollPane srlExplain;
    public javax.swing.JScrollPane srlNotice;
    public javax.swing.JEditorPane txtExplain;
    public javax.swing.JEditorPane txtNotice;
    public javax.swing.JLabel txtTitle;
    // End of variables declaration//GEN-END:variables
    
}
