/*
 * Splash2.java
 *
 * Created on 09 September 2005, 20:16
 */

package grendel.ui;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import javax.swing.ImageIcon;

/**
 *
 * @author  hash9
 */
public class Splash2 extends javax.swing.JWindow {
    private Image img;
    private ImageIcon image;
    private Robot r;
    
    /** Creates new form Splash2 */
    public Splash2() {
        super();
        initComponents();
        capture();
        image= new ImageIcon("ui/images/GrendelSplash.png");
        setSize(image.getIconWidth(),image.getIconHeight()+40);
        
        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(screensize.width/2 - 150, screensize.height/2 - 150);
        
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAlwaysOnTop(true);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Splash2().setVisible(true);
            }
        });
    }
    
    public void capture() {
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        if (r ==null) {
            try {
                r = new Robot();
            } catch (AWTException awte) {
                awte.printStackTrace();
            }
        }
        img = r.createScreenCapture(new Rectangle(0, 0, d.width, d.height));
    }
    
    public void paint(Graphics g) {
        Rectangle rect = g.getClipBounds();
        g.drawImage(img, 0, 0, getWidth(), getHeight(), getX(), getY(),
                getX() + getWidth(), getY() + getHeight(), null);
        //g.drawImage(screen, 0, 0, getWidth(), getHeight(),Color.BLUE, null);
        g.setColor(Color.WHITE);
        g.fillRect(0,0,image.getIconWidth(), image.getIconHeight());
        image.paintIcon(this,g,0,0);
        //paintGrendel(g);
        paintProgressBar(g);
        paintNotice(g);
    }
    
    public void paintGrendel(Graphics l_g) {
        Graphics g = l_g.create();
        g.translate(-10,100);
        String grendel = "Grendel";
        
        g.setColor(new Color(140,139,245));
        Font f = g.getFont().deriveFont(Font.BOLD,42F);
        
        g.setFont(f);
        double width = g.getFontMetrics().getStringBounds(grendel,g).getWidth();
        int offset =(int) Math.round(Math.abs(getWidth()-width)/2);
        paintGrendelShadow(g,grendel,offset);
        g.drawChars(grendel.toCharArray(),0,grendel.length(),offset,0);
    }
    
    
    public void paintGrendelShadow(Graphics l_g, String grendel, int offset) {
        Graphics g = l_g.create();
        g.translate(10,5);
        g.setColor(new Color(140,139,245,128));
        g.drawChars(grendel.toCharArray(),0,grendel.length(),offset,0);
    }
    
    public void paintProgressBar(Graphics l_g) {
        Graphics g = l_g.create();
        g.translate(10,image.getIconHeight()+5);
        g.setColor(new Color(51,255,0,172));
        g.fillRect(0,10,getSclPro(),10);
    }
    
    private volatile char[] notice = new char[0];
    //private volatile char[] notice = "Notice...".toCharArray();
    public void paintNotice(Graphics l_g) {
        if (notice.length>0) {
            Graphics g = l_g.create();
            g.translate(0,image.getIconHeight()-10);
            g.setColor(Color.BLACK);
            Font f = g.getFont().deriveFont(Font.BOLD);
            g.setFont(f);
            double width = g.getFontMetrics().getStringBounds(notice,0,notice.length,g).getWidth();
            int offset =(int) Math.round(Math.abs(getWidth()-width)/2);
            g.drawChars(notice,0,notice.length,offset,0);
        }
    }
    
    private volatile int i = 0;
    private int getSclPro() {
        float max_w=getWidth()-20;
        return Math.round((max_w*i)/100);
    }
    
    public void resetBar() {
        i =0;
        pause();
    }
    
    public void incrementBar(int increment) {
        i += increment;
        if (i>100) i =100;
        if (i<0) i = 0;
        pause();
    }
    
    public void setNotice(String s) {
        notice = s.toCharArray();
        pause();
    }
    
    public void clearNotice() {
        notice = new char[0];
        pause();
    }
    
    public void dispose() {
        pause();
        Thread t = Thread.currentThread();
        if (t.getName().equalsIgnoreCase("main")) {
            try {
                t.sleep(500);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
        pause();
        super.dispose();
    }
    
    private void pause() {
        Thread t = Thread.currentThread();
        if (t.getName().equalsIgnoreCase("main")) {
            t.yield();
            repaint();
            t.yield();
            repaint();
            t.yield();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
