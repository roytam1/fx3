#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1998
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

ifdef MOZ_STATIC_COMPONENTS
MODULE		= staticmod
LIBRARY_NAME	= staticmod
SHORT_LIBNAME	= statcmod
endif

IS_COMPONENT	= 1

include $(topsrcdir)/config/config.mk

REQUIRES	= xpcom \
		  $(NULL)

ifdef MOZ_STATIC_COMPONENTS
CPPSRCS		= nsStaticModule.cpp
endif

LOCAL_INCLUDES	= -I$(srcdir)

#
# _COMPONENT_BASE is the base name of the meta component library
# that we are building in the current pass of this makefile
#
# mozcomps is a special name used to specify that we want to link all
# of the non-meta components into this special meta component
#
ifdef _COMPONENT_BASE
ifeq ($(_COMPONENT_BASE),mozcomps)
_FINAL_COMPONENT_NAMES := $(shell cat $(FINAL_LINK_COMP_NAMES))
_FINAL_COMPONENT_LIBS := $(shell cat $(FINAL_LINK_COMPS))
_FINAL_LINK_LIBS := $(shell cat $(FINAL_LINK_LIBS))
_META_COMPONENT_NAMES := _FINAL_COMPONENT_NAMES
_META_COMPONENT_LIBS := _FINAL_COMPONENT_LIBS
_META_DEP_LIBS := _FINAL_LINK_LIBS
else
_META_COMPONENT_NAMES := MOZ_META_COMPONENTS_$(_COMPONENT_BASE)
_META_COMPONENT_LIBS := MOZ_META_COMPONENTS_$(_COMPONENT_BASE)_comps
_META_DEP_LIBS := MOZ_META_COMPONENTS_$(_COMPONENT_BASE)_libs
endif # mozcomps
endif # _COMPONENT_BASE

ifdef MOZ_STATIC_COMPONENTS
SHARED_LIBRARY_LIBS = \
		$(foreach m, $(MOZ_STATIC_COMPONENTS), $(DIST)/lib/components/$(LIB_PREFIX)$(m).$(LIB_SUFFIX))
endif

ifdef _COMPONENT_BASE
ifneq ($(_COMPONENT_BASE),mozcomps)
SHARED_LIBRARY_LIBS = $(foreach m,$($(_META_COMPONENT_LIBS)), $(DIST)/lib/components/$(LIB_PREFIX)$(m).$(LIB_SUFFIX))
EXTRA_DSO_LDOPTS += $(foreach m,$($(_META_DEP_LIBS)), $(DIST)/lib/$(LIB_PREFIX)$(m).$(LIB_SUFFIX))
endif
endif

#
# Create each meta component by calling this makefile recursively
# and forcing it to built a shared library meta component library
#
ifndef NO_RECURSE
libs clean distclean clobber realclean clobber_all::
	set -e; \
	for f in $(MOZ_META_COMPONENTS); do \
		$(MAKE) NO_RECURSE=1 BUILD_STATIC_LIBS= LIBRARY_NAME=meta_$$f CPPSRCS=nsMetaModule_$$f.cpp _COMPONENT_BASE=$$f $@ ; \
	done
endif

ifeq ($(LIBRARY_NAME),meta_mozcomps)
include $(topsrcdir)/config/static-config.mk
EXTRA_DSO_LIBS	= $(STATIC_EXTRA_DSO_LIBS)
endif

include $(topsrcdir)/config/rules.mk

ifeq ($(LIBRARY_NAME),meta_mozcomps)
include $(topsrcdir)/config/static-rules.mk
endif

ifdef MOZ_STATIC_COMPONENTS
EXTRA_DSO_LDOPTS += \
		$(ZLIB_LIBS) \
		$(XPCOM_LIBS) \
		$(MOZ_JS_LIBS) \
		$(NSPR_LIBS) \
		$(PNG_LIBS)
endif

ifdef MOZ_META_COMPONENTS
# Force XPCOM_TRANSLATE_NSGM_ENTRY_POINT to be defined so the macros
# in nsIGenericFactory.h will come out in the wash.
DEFINES += -DMETA_MODULE=\"$(LIBRARY_NAME)\" -DXPCOM_TRANSLATE_NSGM_ENTRY_POINT

ifeq ($(LIBRARY_NAME),meta_mail)
EXTRA_DSO_LDOPTS += \
	$(LIBS_DIR) \
	$(call EXPAND_MOZLIBNAME,xpcom_compat gkgfx rdfutil_s) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(MOZ_COMPONENT_LIBS) \
	$(TK_LIBS) \
	$(NULL)
endif # meta_mail

ifeq ($(LIBRARY_NAME),meta_crypto)
EXTRA_DSO_LDOPTS += \
	$(MOZ_JS_LIBS) \
	$(NSS_LIBS) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(MOZ_COMPONENT_LIBS) \
	$(NULL)
endif # meta_crypto

ifeq ($(LIBRARY_NAME),meta_mozcomps)

# We don't want to link mozcomps against NSS if not necessary
ifneq (,$(findstring crypto,$(MOZ_META_COMPONENTS)))
STATIC_EXTRA_LIBS := $(filter-out $(NSS_LIBS),$(STATIC_EXTRA_LIBS))
endif

EXTRA_DSO_LDOPTS += \
	$(LIBS_DIR) \
	$(EXTRA_DSO_LIBS) \
	$(STATIC_EXTRA_LIBS) \
	$(MOZ_JS_LIBS) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(MOZ_COMPONENT_LIBS) \
	$(TK_LIBS) \
	$(NULL)

ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
OS_LIBS	+= -framework QuickTime
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
OS_LIBS	+= -framework Cocoa
endif

endif # meta_mozcomps

endif # MOZ_META_COMPONENTS

ifeq ($(OS_ARCH),WINNT)
OS_LIBS	+= ole32.lib shell32.lib
endif

GARBAGE += $(CPPSRCS)

list:
	echo $(MOZ_STATIC_COMPONENTS)

ifdef _NO_AUTO_VARS
_TARGET = $(srcdir)/$(@F)
GARBAGE	+= $(addprefix $(srcdir)/,$(CPPSRCS))
else
_TARGET = $@
endif

ifdef MOZ_STATIC_COMPONENTS
nsStaticModule.cpp: nsMetaModule.cpp.in Makefile Makefile.in $(DEPTH)/config/autoconf.mk
	rm -f $@
	cat $< | \
	sed -e "s|%DECLARE_SUBMODULE_INFOS%|$(foreach m, $(MOZ_STATIC_COMPONENTS), extern nsModuleInfo NSMODULEINFO($(m));)|" | \
	sed -e "s|%SUBMODULE_INFOS%|$(foreach m, $(MOZ_STATIC_COMPONENTS), \\& NSMODULEINFO($(m)),)|" \
	> $(_TARGET)
endif

nsMetaModule_%.cpp: nsMetaModule.cpp.in Makefile Makefile.in $(topsrcdir)/config/config.mk
	rm -f $@
	cat $< | \
	sed -e "s|%DECLARE_SUBMODULE_INFOS%|$(foreach m, $($(_META_COMPONENT_NAMES)), extern nsModuleInfo NSMODULEINFO($(m));)|" | \
	sed -e "s|%SUBMODULE_INFOS%|$(foreach m, $($(_META_COMPONENT_NAMES)), \\& NSMODULEINFO($(m)),)|" \
	> $(_TARGET)

