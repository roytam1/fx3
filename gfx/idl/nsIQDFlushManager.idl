/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is supposed to avoid exccessive QuickDraw flushes.
 *
 * The Initial Developer of the Original Code is
 * Mark Mentovai <mark@moxienet.com>.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

%{ C++
#include <Carbon/Carbon.h>
%}

native CGrafPtr(CGrafPtr);
native RgnHandle(RgnHandle);

/**
 * nsIQDFlushManager is responsible for rate-limiting QuickDraw buffer
 * flushes.  Think of it as a plumber in a time of rationing.  It's
 * expected to be used as a singleton doled out by the service manager.
 */

[uuid(40352CE3-9D15-4643-8CBF-71DA61650F13)]
interface nsIQDFlushManager : nsISupports
{
  /**
   * Flushes the port buffer, a la QDFlushPortBuffer.  If the buffer has
   * been flushed too recently, the region to flush is instead added to
   * the dirty region, and a buffer flush will be scheduled for an
   * appropriate time.
   *
   * @param aPort the QuickDraw port to flush
   *
   * @param aRegion the region to flush or mark as dirty
   */
  void flushPortBuffer(in CGrafPtr aPort, in RgnHandle aRegion);

  /**
   * Cancels a pending flush scheduled by calling flushPortBuffer.  This
   * method is suitable to call when a port is destroyed.
   *
   * @param aPort the QuickDraw port to not flush
   */
  void removePort(in CGrafPtr aPort);
};
