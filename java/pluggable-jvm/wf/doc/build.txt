How to build Waterfall:

Requirments:
 Linux/Solaris: 
   gcc, pthreads, JDK1.3, LessTif/Motif headers only
   glib, gtk+ - only for test program, not used in Waterfall

 Win32:
   Visual C++ 5.0, 6.0, JDK1.3
   glib, gtk+ - only for test program  - 
                can be found at http://user.sgic.fi/~tml/gimp/win32/

Build, run:
 Linux/Solaris:
   - get CVS tree 
   - cd build/unix
   - export/setenv WFJDKHOME=<path to JDK1.3 to be used by Waterfall>
   - edit Defs.gmk to select desired JVM type/vendor (default is Sun Hotspot 
     JVM)
   - gmake
   - edit set_path script according to selected JVM type/vendor
   - source ./set_path
   - ./plugin_host - runs test program
      It allows 
         - to start/stop JVM, stop hangs up program, as not implemented by JDK 
         - obtain capabilities (required to perform other actions)
         - show/hide Java console
         - get Waterfall module description 
         - load test extension and interact with it
         - register native window and test it using test extension
         - test Java/native thread interaction
  Win32:
   - get CVS tree 
   - set WFJDKHOME=<path to JDK1.3 to be used by Waterfall>
   - cd build\win32
   - edit makefile.win to select desired JVM type/vendor(default is Sun 
     Hotspot JVM)
   - if you wish to build test program
        - make folder for GTK/GDK libs 
        - mkdir include and copy GTK/GDK/GLIB headers there
        - mkdir lib and copy GTK/GDK/GLIB libs there
        - set env variables HOSTINCPATH and HOSTLIBPATH pointing on include and lib respectively
        - type nmake -f makefile.win host_prog
   - nmake -f makefile.win
   - set WFHOME=<path to current directory>
   - plugin_host.exe - runs test program 
         - to start/stop JVM, stop hangs up program, as not implemented by JDK 
         - obtain capabilities (required to perform other actions)
         - show/hide Java console
         - get Waterfall module description 
         - load test extension and interact with it
         - register native window and test it using test extension
         - test Java/native thread interaction - not yet implemented
           on Win32
