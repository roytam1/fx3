/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SVG project.
 *
 * The Initial Developer of the Original Code is
 * Crocodile Clips Ltd.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex.fritze@crocodile-clips.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsISVGRendererRegion;
interface nsISVGRendererCanvas;
interface nsIDOMSVGRect;
interface nsSVGPathData;
interface nsSVGPathGeometryFrame;

/**
 * \addtogroup renderer_interfaces Rendering Engine Interfaces
 * @{
 */

/**
 * One of a number of interfaces (all starting with nsISVGRenderer*)
 * to be implemented by an SVG rendering engine. See nsISVGRenderer
 * for more details.
 *
 * The SVG rendering backend uses this interface to communicate to the
 * rendering engine-native path objects.
 *
 * A path geometry object is instantiated by the rendering backend for
 * a given nsISVGPathGeometrySource object with a call to
 * nsISVGRenderer::createPathGeometry(). The path geometry object is
 * assumed to store a reference to its associated source object and
 * provide rendering, hit-testing and metrics for the path described
 * by the nsISVGPathGeometrySource members.
 */
[uuid(c34204aa-eb2a-4c70-9c9e-bf5ed0671e6b)]
interface nsISVGRendererPathGeometry : nsISupports
{
  /**
   * Paint this object.
   *
   * @param canvas The canvas to render to.
   */
  void render(in nsSVGPathGeometryFrame source,
              in nsISVGRendererCanvas canvas);
  
  /**
   * Called by this object's corresponding nsISVGPathGeometrySource as
   * a notification that some of the source's data has changed.
   * @return Region that needs to be redrawn.
   */
  nsISVGRendererRegion update(in nsSVGPathGeometryFrame source);
  
  /**
   * Get a region object describing the area covered with paint by
   * this path geometry.
   *
   * @return Covered region.
   */
  nsISVGRendererRegion getCoveredRegion(in nsSVGPathGeometryFrame source);

  /**
   * Hit-testing method. Does this path geometry (with all relevant
   * transformations applied) contain the point x,y? Mode of operation
   * (e.g. whether to test fill or stroke) is determined by
   * nsISVGPathGeometrySource::hittestMask.
   *
   * @param x X-coordinate of test point.  @param y Y-coordinate of
   * test point.
   * @return PR_TRUE if the path geometry contains the point,
   * PR_FALSE otherwise.
   */
  boolean containsPoint(in nsSVGPathGeometryFrame source,
                        in float x, in float y);

  /**
   * Bounding box (does not include stroke width)
   */
  /*
  readonly attribute nsIDOMSVGRect boundingBox;
  */
  void getBoundingBox(in nsSVGPathGeometryFrame source, out nsIDOMSVGRect box);

  /*
   * Flattened path
   */
  void flatten(in nsSVGPathGeometryFrame source, out nsSVGPathData data);
};

/** @} */
