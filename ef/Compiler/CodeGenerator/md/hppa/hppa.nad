%top
/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */
#include "Burg.h"
%

%terminals
%

%startsymbols
Control
Result
Exception
Store
Vcond
Vint
Vfixed
Vlong
Vfloat
Vdouble
Vptr
Cint
Cfixed
Clong
Cfloat
Cdouble
Cptr
%

%grammar
Vint:		coReg_I		$1		$
Vlong:		coReg_L		$1		$
Vfloat:		coReg_F		$1		$			
Vdouble:	coReg_D		$1		$
Vptr:		coReg_A		$1		$
Vcond:		coReg_C		$1		$
Store:		coReg_M		$1		$
Cint:		coReg_I		$1		$
Cfixed:		coReg_I		$1		$
Clong:		coReg_L		$1		$
Cfloat:		coReg_F		$1		$
Cdouble:	coReg_D		$1		$
Cptr:		coReg_A		$1		$

Vfixed:		Vint		$1		$
Vint:		Vfixed		$1		$

Vfixed:		poConst_I		$1		$emConst_IF
Vint:		poConst_I		$1		$emConst_I
Vlong:		poConst_L		$1		$emConst_L
Vfloat:		poConst_F		$1		$emConst_F			
Vdouble:	poConst_D		$1		$emConst_D
Vptr:		poConst_A		$1		$emConst_A
Vcond:		poConst_C		$1		$emConst_C

Store:		poBreak(Store)			$1		$emBreak

Vint:		poArg_I						$1		$emArg_I
Vlong:		poArg_L						$1		$emArg_L
Vfloat:		poArg_F						$1		$emArg_F
Vdouble:	poArg_D						$1		$emArg_D
Vptr:		poArg_A						$1		$emArg_A
Store:		poArg_M						$1		$emArg_M

Result:		poResult_I(Vint)			$1		$emResult_I
Result:		poResult_L(Vlong)			$1		$emResult_L
Result:		poResult_F(Vfloat)			$1		$emResult_F
Result:		poResult_D(Vdouble)			$1		$emResult_D
Result:		poResult_A(Vptr)			$1		$emResult_A
//			(not used):		poResult_C(Acond)			$1		$emResult_C
Result:		poResult_M(Store)			$1		$emResult_M

Control:	poIfLt(Vcond)			$1		$emIfLt
Control:	poIfEq(Vcond)			$1		$emIfEq
Control:	poIfLe(Vcond)			$1		$emIfLe
Control:	poIfGt(Vcond)			$1		$emIfGt
Control:	poIfLgt(Vcond)			$1		$emIfLgt
Control:	poIfGe(Vcond)			$1		$emIfGe
Control:	poIfOrd(Vcond)			$1		$emIfOrd
Control:	poIfUnord(Vcond)			$1		$emIfUnord
Control:	poIfULt(Vcond)			$1		$emIfULt
Control:	poIfUEq(Vcond)			$1		$emIfUEq
Control:	poIfULe(Vcond)			$1		$emIfULe
Control:	poIfUGt(Vcond)			$1		$emIfUGt
Control:	poIfNe(Vcond)			$1		$emIfNe
Control:	poIfUGe(Vcond)			$1		$emIfUGe

Control:	poSwitch(Vint)			$1		$emSwitch

Vint:		poAnd_I(Vint, Vint)			$1		$emAnd_I
Vlong:		poAnd_L(Vlong, Vlong)			$1		$emAnd_L
Vint:		poAndI_I(Vint, Cint)			$1		$emAndI_I
Vlong:		poAndI_L(Vlong, Clong)			$1		$emAndI_L
Vint:		poOr_I(Vint, Vint)			$1		$emOr_I
Vlong:		poOr_L(Vlong, Vlong)			$1		$emOr_L
Vint:		poOrI_I(Vint, Cint)			$1		$emOrI_I
Vlong:		poOrI_L(Vlong, Clong)			$1		$emOrI_L
Vint:		poXor_I(Vint, Vint)			$1		$emXor_I
Vlong:		poXor_L(Vlong, Vlong)			$1		$emXor_L
Vint:		poXorI_I(Vint, Cint)			$1		$emXorI_I
Vlong:		poXorI_L(Vlong, Clong)			$1		$emXorI_L


Vptr:		poAdd_A(Vptr, poShlI_I(Vint, Cint))	$1	$emShAdd_IIndirect

Vint:		poAdd_I(Vint, Vint)			$1		$emAdd_I
Vlong:		poAdd_L(Vlong, Vlong)			$1		$emAdd_L
Vptr:		poAdd_A(Vptr, Vint)			$1		$emAdd_A
Vptr:		poAddU_A(Vptr, Vint)			$1		$emAddU_A
Vint:		poAddI_I(Vint, Cint)			$1		$emAddI_I
Vlong:		poAddI_L(Vlong, Clong)			$1		$emAddI_L
Vptr:		poAddI_A(Vptr, Cint)			$1		$emAddI_A
Vptr:		poAddR_A(Cptr, Vint)			$1		$emAddR_A
Vptr:		poAddRU_A(Cptr, Vint)			$1		$emAddRU_A

Vint:		poSub_I(Vint, Vint)			$1		$emSub_I
Vlong:		poSub_L(Vlong, Vlong)			$1		$emSub_L
Vptr:		poSub_A(Vptr, Vint)			$1		$emSub_A
Vptr:		poSubU_A(Vptr, Vint)			$1		$emSubU_A
Vint:		poSubR_I(Cint, Vint)			$1		$emSubR_I
Vlong:		poSubR_L(Clong, Vlong)			$1		$emSubR_L
Vptr:		poSubR_A(Cptr, Vint)			$1		$emSubR_A
Vptr:		poSubUR_A(Cptr, Vint)			$1		$emSubUR_A
Vint:		poSubA_I(Vptr, Vptr)			$1		$emSubA_I
Vint:		poSubAI_I(Vptr, Cptr)			$1		$emSubAI_I
Vint:		poSubAR_I(Cptr, Vptr)			$1		$emSubAR_I

Vfixed:		poMul_I(Vfixed, Vfixed)			$1		$emMul_I
Vlong:		poMul_L(Vlong, Vlong)			$1		$emMul_L
Vfixed:		poMulI_I(Vfixed, Cfixed)		$1		$emMulI_I
Vlong:		poMulI_L(Vlong, Clong)			$1		$emMulI_L

Vint:		poDivI_I(Vint, Cint)			$1		$emDivI_I
Vint:		poModE_I(Vint, Vint)			$1		$emModE_I

Vint:		poShl_I(Vint, Vint)			$1		$emShl_I
Vlong:		poShl_L(Vlong, Vint)			$1		$emShl_L
Vint:		poShlI_I(Vint, Cint)			$1		$emShlI_I
Vlong:		poShlI_L(Vlong, Cint)			$1		$emShlI_L
Vint:		poShlR_I(Cint, Vint)			$1		$emShlR_I
Vlong:		poShlR_L(Clong, Vint)			$1		$emShlR_L
Vint:		poShr_I(Vint, Vint)			$1		$emShr_I
Vlong:		poShr_L(Vlong, Vint)			$1		$emShr_L
Vint:		poShrI_I(Vint, Cint)			$1		$emShrI_I
Vlong:		poShrI_L(Vlong, Cint)			$1		$emShrI_L
Vint:		poShrR_I(Cint, Vint)			$1		$emShrR_I
Vlong:		poShrR_L(Clong, Vint)			$1		$emShrR_L
Vint:		poShrU_I(Vint, Vint)			$1		$emShrU_I
Vlong:		poShrU_L(Vlong, Vint)			$1		$emShrU_L
Vint:		poShrUI_I(Vint, Cint)			$1		$emShrUI_I
Vlong:		poShrUI_L(Vlong, Cint)			$1		$emShrUI_L
Vint:		poShrUR_I(Cint, Vint)			$1		$emShrUR_I
Vlong:		poShrUR_L(Clong, Vint)			$1		$emShrUR_L

Vint:		poExt_I(Vint, Cint)			$1		$emExt_I
Vlong:		poExt_L(Vlong, Cint)			$1		$emExt_L

Vfloat:		poFAdd_F(Vfloat, Vfloat)			$1		$emFAdd_F
Vdouble:	poFAdd_D(Vdouble, Vdouble)			$1		$emFAdd_D
Vfloat:		poFAddI_F(Vfloat, Cfloat)			$1		$emFAddI_F
Vdouble:	poFAddI_D(Vdouble, Cdouble)			$1		$emFAddI_D

Vfloat:		poFSub_F(Vfloat, Vfloat)			$1		$emFSub_F
Vdouble:	poFSub_D(Vdouble, Vdouble)			$1		$emFSub_D
Vfloat:		poFSubR_F(Cfloat, Vfloat)			$1		$emFSubR_F
Vdouble:	poFSubR_D(Cdouble, Vdouble)			$1		$emFSubR_D

Vfloat:		poFMul_F(Vfloat, Vfloat)			$1		$emFMul_F
Vdouble:	poFMul_D(Vdouble, Vdouble)			$1		$emFMul_D
Vfloat:		poFMulI_F(Vfloat, Cfloat)			$1		$emFMulI_F
Vdouble:	poFMulI_D(Vdouble, Cdouble)			$1		$emFMulI_D

Vfloat:		poFDiv_F(Vfloat, Vfloat)			$1		$emFDiv_F
Vdouble:	poFDiv_D(Vdouble, Vdouble)			$1		$emFDiv_D
Vfloat:		poFDivI_F(Vfloat, Cfloat)			$1		$emFDivI_F
Vdouble:	poFDivI_D(Vdouble, Cdouble)			$1		$emFDivI_D
Vfloat:		poFDivR_F(Cfloat, Vfloat)			$1		$emFDivR_F
Vdouble:	poFDivR_D(Cdouble, Vdouble)			$1		$emFDivR_D

Vfloat:		poFRem_F(Vfloat, Vfloat)			$1		$emFRem_F
Vdouble:	poFRem_D(Vdouble, Vdouble)			$1		$emFRem_D
Vfloat:		poFRemI_F(Vfloat, Cfloat)			$1		$emFRemI_F
Vdouble:	poFRemI_D(Vdouble, Cdouble)			$1		$emFRemI_D
Vfloat:		poFRemR_F(Cfloat, Vfloat)			$1		$emFRemR_F
Vdouble:	poFRemR_D(Cdouble, Vdouble)			$1		$emFRemR_D

Vint:		poConvI_L(Vlong)			$1		$emConvI_L
Vlong:		poConvL_I(Vint)			$1		$emConvL_I

Vint:		poFConvI_F(Vfloat)			$1		$emFConvI_F
Vint:		poFConvI_D(Vdouble)			$1		$emFConvI_D
Vlong:		poFConvL_F(Vfloat)			$1		$emFConvL_F
Vlong:		poFConvL_D(Vdouble)			$1		$emFConvL_D
Vfloat:		poFConvF_I(Vint)			$1		$emFConvF_I
Vfloat:		poFConvF_L(Vlong)			$1		$emFConvF_L
Vfloat:		poFConvF_D(Vdouble)			$1		$emFConvF_D
Vdouble:	poFConvD_I(Vint)			$1		$emFConvD_I
Vdouble:	poFConvD_L(Vlong)			$1		$emFConvD_L
Vdouble:	poFConvD_F(Vfloat)			$1		$emFConvD_F

Vcond:		poCmp_I(Vint, Vint)				$1		$emCmp_I
Vcond:		poCmp_L(Vlong, Vlong)			$1		$emCmp_L
Vcond:		poCmpI_I(Vint, Cint)			$1		$emCmpI_I
Vcond:		poCmpI_L(Vlong, Clong)			$1		$emCmpI_L
Vcond:		poCmpU_I(Vint, Vint)			$1		$emCmpU_I
Vcond:		poCmpU_L(Vlong, Vlong)			$1		$emCmpU_L
Vcond:		poCmpU_A(Vptr, Vptr)			$1		$emCmpU_A
Vcond:		poCmpUI_I(Vint, Cint)			$1		$emCmpUI_I
Vcond:		poCmpUI_L(Vlong, Clong)			$1		$emCmpUI_L
Vcond:		poCmpUI_A(Vptr, Cptr)			$1		$emCmpUI_A

Vcond:		poFCmp_F(Vfloat, Vfloat)			$1		$emFCmp_F
Vcond:		poFCmp_D(Vdouble, Vdouble)			$1		$emFCmp_D
Vcond:		poFCmpI_F(Vfloat, Cfloat)			$1		$emFCmpI_F
Vcond:		poFCmpI_D(Vdouble, Cdouble)			$1		$emFCmpI_D

Vint:		poLt_I(Vcond)			$1		$emLt_I
Vint:		poEq_I(Vcond)			$1		$emEq_I
Vint:		poLe_I(Vcond)			$1		$emLe_I
Vint:		poGt_I(Vcond)			$1		$emGt_I
Vint:		poLgt_I(Vcond)			$1		$emLgt_I
Vint:		poGe_I(Vcond)			$1		$emGe_I
Vint:		poOrd_I(Vcond)			$1		$emOrd_I
Vint:		poUnord_I(Vcond)		$1		$emUnord_I
Vint:		poULt_I(Vcond)			$1		$emULt_I
Vint:		poUEq_I(Vcond)			$1		$emUEq_I
Vint:		poULe_I(Vcond)			$1		$emULe_I
Vint:		poUGt_I(Vcond)			$1		$emUGt_I
Vint:		poNe_I(Vcond)			$1		$emNe_I
Vint:		poUGe_I(Vcond)			$1		$emUGe_I

Vint:		poCatL_I(Vcond)			$1		$emCatL_I
Vint:		poCatG_I(Vcond)			$1		$emCatG_I
Vint:		poCatCL_I(Vcond)			$1		$emCatCL_I
Vint:		poCatCG_I(Vcond)			$1		$emCatCG_I

Exception:		poChkNull(Vptr)			$1		$emChkNull
Exception:		poLimit(Vint, Vint)			$1		$emLimit
Exception:		poLimitI(Vint, Cint)			$1		$emLimitI
Exception:		poLimitR(Cint, Vint)			$1		$emLimitR

Vint:		poLd_I(Vptr)			$1		$emLd_I
Vlong:		poLd_L(Vptr)			$1		$emLd_L
Vfloat:		poLd_F(Vptr)			$1		$emLd_F
Vdouble:	poLd_D(Vptr)			$1		$emLd_D
Vptr:		poLd_A(Vptr)			$1		$emLd_A
Vint:		poLdE_I(Cptr)			$1		$emLdE_I
Vlong:		poLdE_L(Cptr)			$1		$emLdE_L
Vfloat:		poLdE_F(Cptr)			$1		$emLdE_F
Vdouble:	poLdE_D(Cptr)			$1		$emLdE_D
Vptr:		poLdE_A(Cptr)			$1		$emLdE_A
Vint:		poLdG_I(Cptr)			$1		$emLdG_I
Vlong:		poLdG_L(Cptr)			$1		$emLdG_L
Vfloat:		poLdG_F(Cptr)			$1		$emLdG_F
Vdouble:	poLdG_D(Cptr)			$1		$emLdG_D
Vptr:		poLdG_A(Cptr)			$1		$emLdG_A
Vint:		poLdS_B(Vptr)			$1		$emLdS_B
Vint:		poLdS_H(Vptr)			$1		$emLdS_H
Vint:		poLdSE_B(Cptr)			$1		$emLdSE_B
Vint:		poLdSE_H(Cptr)			$1		$emLdSE_H
Vint:		poLdSG_B(Cptr)			$1		$emLdSG_B
Vint:		poLdSG_H(Cptr)			$1		$emLdSG_H
Vint:		poLdU_B(Vptr)			$1		$emLdU_B
Vint:		poLdU_H(Vptr)			$1		$emLdU_H
Vint:		poLdUE_B(Cptr)			$1		$emLdUE_B
Vint:		poLdUE_H(Cptr)			$1		$emLdUE_H
Vint:		poLdUG_B(Cptr)			$1		$emLdUG_B
Vint:		poLdUG_H(Cptr)			$1		$emLdUG_H
Vint:		poLdV_I(Vptr)			$1		$emLdV_I
Vlong:		poLdV_L(Vptr)			$1		$emLdV_L
Vfloat:		poLdV_F(Vptr)			$1		$emLdV_F
Vdouble:	poLdV_D(Vptr)			$1		$emLdV_D
Vptr:		poLdV_A(Vptr)			$1		$emLdV_A
Vint:		poLdVE_I(Cptr)			$1		$emLdVE_I
Vlong:		poLdVE_L(Cptr)			$1		$emLdVE_L
Vfloat:		poLdVE_F(Cptr)			$1		$emLdVE_F
Vdouble:	poLdVE_D(Cptr)			$1		$emLdVE_D
Vptr:		poLdVE_A(Cptr)			$1		$emLdVE_A
Vint:		poLdVG_I(Cptr)			$1		$emLdVG_I
Vlong:		poLdVG_L(Cptr)			$1		$emLdVG_L
Vfloat:		poLdVG_F(Cptr)			$1		$emLdVG_F
Vdouble:	poLdVG_D(Cptr)			$1		$emLdVG_D
Vptr:		poLdVG_A(Cptr)			$1		$emLdVG_A
Vint:		poLdVS_B(Vptr)			$1		$emLdVS_B
Vint:		poLdVS_H(Vptr)			$1		$emLdVS_H
Vint:		poLdVSE_B(Cptr)			$1		$emLdVSE_B
Vint:		poLdVSE_H(Cptr)			$1		$emLdVSE_H
Vint:		poLdVSG_B(Cptr)			$1		$emLdVSG_B
Vint:		poLdVSG_H(Cptr)			$1		$emLdVSG_H
Vint:		poLdVU_B(Vptr)			$1		$emLdVU_B
Vint:		poLdVU_H(Vptr)			$1		$emLdVU_H
Vint:		poLdVUE_B(Cptr)			$1		$emLdVUE_B
Vint:		poLdVUE_H(Cptr)			$1		$emLdVUE_H
Vint:		poLdVUG_B(Cptr)			$1		$emLdVUG_B
Vint:		poLdVUG_H(Cptr)			$1		$emLdVUG_H
Vint:		poLdC_I(Vptr)			$1		$emLdC_I
Vint:		poLdC_L(Vptr)			$1		$emLdC_L
Vint:		poLdC_F(Vptr)			$1		$emLdC_F
Vint:		poLdC_D(Vptr)			$1		$emLdC_D
Vint:		poLdC_A(Vptr)			$1		$emLdC_A
Vint:		poLdCE_I(Vptr)			$1		$emLdCE_I
Vint:		poLdCE_L(Vptr)			$1		$emLdCE_L
Vint:		poLdCE_F(Vptr)			$1		$emLdCE_F
Vint:		poLdCE_D(Vptr)			$1		$emLdCE_D
Vint:		poLdCE_A(Vptr)			$1		$emLdCE_A

Vint:		poLdC_I(poAddI_A(Vptr, Cint))		$0		$emLdC_IRegisterIndirect
Vint:		poLd_I(poAddI_A(Vptr, Cint))		$0		$emLd_IRegisterIndirect


//	poLdCG_I = 257,   	// Load constant global					*Cptr -> Vint				(not used)
//	poLdCG_L = 258,   	// Load constant global					*Cptr -> Vlong				(not used)
//	poLdCG_F = 259,   	// Load constant global					*Cptr -> Vfloat				(not used)
//	poLdCG_D = 260,   	// Load constant global					*Cptr -> Vdouble			(not used)
//	poLdCG_A = 261,   	// Load constant global					*Cptr -> Vptr				(not used)
Vint:		poLdCS_B(Vptr)			$1		$emLdCS_B
Vint:		poLdCS_H(Vptr)			$1		$emLdCS_H
Vint:		poLdCSE_B(Cptr)			$1		$emLdCSE_B
Vint:		poLdCSE_H(Cptr)			$1		$emLdCSE_H
//Vint			(not used):		poLdCSG_B(Cptr)			$1		$emLdCSG_B
//Vint			(not used):		poLdCSG_H(Cptr)			$1		$emLdCSG_H
Vint:		poLdCU_B(Vptr)			$1		$emLdCU_B
Vint:		poLdCU_H(Vptr)			$1		$emLdCU_H
Vint:		poLdCUE_B(Cptr)			$1		$emLdCUE_B
Vint:		poLdCUE_H(Cptr)			$1		$emLdCUE_H
//Vint			(not used):		poLdCUG_B(Cptr)			$1		$emLdCUG_B
//Vint			(not used):		poLdCUG_H(Cptr)			$1		$emLdCUG_H

Store:		poSt_B(Vptr, Vint)			$1		$emSt_B
Store:		poSt_H(Vptr, Vint)			$1		$emSt_H
Store:		poSt_I(Vptr, Vint)			$1		$emSt_I
Store:		poSt_L(Vptr, Vlong)			$1		$emSt_L
Store:		poSt_F(Vptr, Vfloat)			$1		$emSt_F
Store:		poSt_D(Vptr, Vdouble)			$1		$emSt_D
Store:		poSt_A(Vptr, Vptr)			$1		$emSt_A
Store:		poStI_B(Vptr, Cint)			$1		$emStI_B
Store:		poStI_H(Vptr, Cint)			$1		$emStI_H
Store:		poStI_I(Vptr, Cint)			$1		$emStI_I
Store:		poStI_L(Vptr, Clong)			$1		$emStI_L
Store:		poStI_F(Vptr, Cfloat)			$1		$emStI_F
Store:		poStI_D(Vptr, Cdouble)			$1		$emStI_D
Store:		poStI_A(Vptr, Cptr)			$1		$emStI_A
Store:		poStE_B(Cptr, Vint)			$1		$emStE_B
Store:		poStE_H(Cptr, Vint)			$1		$emStE_H
Store:		poStE_I(Cptr, Vint)			$1		$emStE_I
Store:		poStE_L(Cptr, Vlong)			$1		$emStE_L
Store:		poStE_F(Cptr, Vfloat)			$1		$emStE_F
Store:		poStE_D(Cptr, Vdouble)			$1		$emStE_D
Store:		poStE_A(Cptr, Vptr)			$1		$emStE_A
Store:		poStEI_B(Cptr, Cint)			$1		$emStEI_B
Store:		poStEI_H(Cptr, Cint)			$1		$emStEI_H
Store:		poStEI_I(Cptr, Cint)			$1		$emStEI_I
Store:		poStEI_L(Cptr, Clong)			$1		$emStEI_L
Store:		poStEI_F(Cptr, Cfloat)			$1		$emStEI_F
Store:		poStEI_D(Cptr, Cdouble)			$1		$emStEI_D
Store:		poStEI_A(Cptr, Cptr)			$1		$emStEI_A
Store:		poStG_B(Cptr, Vint)			$1		$emStG_B
Store:		poStG_H(Cptr, Vint)			$1		$emStG_H
Store:		poStG_I(Cptr, Vint)			$1		$emStG_I
Store:		poStG_L(Cptr, Vlong)			$1		$emStG_L
Store:		poStG_F(Cptr, Vfloat)			$1		$emStG_F
Store:		poStG_D(Cptr, Vdouble)			$1		$emStG_D
Store:		poStG_A(Cptr, Vptr)			$1		$emStG_A
Store:		poStGI_B(Cptr, Cint)			$1		$emStGI_B
Store:		poStGI_H(Cptr, Cint)			$1		$emStGI_H
Store:		poStGI_I(Cptr, Cint)			$1		$emStGI_I
Store:		poStGI_L(Cptr, Clong)			$1		$emStGI_L
Store:		poStGI_F(Cptr, Cfloat)			$1		$emStGI_F
Store:		poStGI_D(Cptr, Cdouble)			$1		$emStGI_D
Store:		poStGI_A(Cptr, Cptr)			$1		$emStGI_A
Store:		poStV_B(Vptr, Vint)			$1		$emStV_B
Store:		poStV_H(Vptr, Vint)			$1		$emStV_H
Store:		poStV_I(Vptr, Vint)			$1		$emStV_I
Store:		poStV_L(Vptr, Vlong)			$1		$emStV_L
Store:		poStV_F(Vptr, Vfloat)			$1		$emStV_F
Store:		poStV_D(Vptr, Vdouble)			$1		$emStV_D
Store:		poStV_A(Vptr, Vptr)			$1		$emStV_A
Store:		poStVI_B(Vptr, Cint)			$1		$emStVI_B
Store:		poStVI_H(Vptr, Cint)			$1		$emStVI_H
Store:		poStVI_I(Vptr, Cint)			$1		$emStVI_I
Store:		poStVI_L(Vptr, Clong)			$1		$emStVI_L
Store:		poStVI_F(Vptr, Cfloat)			$1		$emStVI_F
Store:		poStVI_D(Vptr, Cdouble)			$1		$emStVI_D
Store:		poStVI_A(Vptr, Cptr)			$1		$emStVI_A
Store:		poStVE_B(Cptr, Vint)			$1		$emStVE_B
Store:		poStVE_H(Cptr, Vint)			$1		$emStVE_H
Store:		poStVE_I(Cptr, Vint)			$1		$emStVE_I
Store:		poStVE_L(Cptr, Vlong)			$1		$emStVE_L
Store:		poStVE_F(Cptr, Vfloat)			$1		$emStVE_F
Store:		poStVE_D(Cptr, Vdouble)			$1		$emStVE_D
Store:		poStVE_A(Cptr, Vptr)			$1		$emStVE_A
Store:		poStVEI_B(Cptr, Cint)			$1		$emStVEI_B
Store:		poStVEI_H(Cptr, Cint)			$1		$emStVEI_H
Store:		poStVEI_I(Cptr, Cint)			$1		$emStVEI_I
Store:		poStVEI_L(Cptr, Clong)			$1		$emStVEI_L
Store:		poStVEI_F(Cptr, Cfloat)			$1		$emStVEI_F
Store:		poStVEI_D(Cptr, Cdouble)			$1		$emStVEI_D
Store:		poStVEI_A(Cptr, Cptr)			$1		$emStVEI_A
Store:		poStVG_B(Cptr, Vint)			$1		$emStVG_B
Store:		poStVG_H(Cptr, Vint)			$1		$emStVG_H
Store:		poStVG_I(Cptr, Vint)			$1		$emStVG_I
Store:		poStVG_L(Cptr, Vlong)			$1		$emStVG_L
Store:		poStVG_F(Cptr, Vfloat)			$1		$emStVG_F
Store:		poStVG_D(Cptr, Vdouble)			$1		$emStVG_D
Store:		poStVG_A(Cptr, Vptr)			$1		$emStVG_A
Store:		poStVGI_B(Cptr, Cint)			$1		$emStVGI_B
Store:		poStVGI_H(Cptr, Cint)			$1		$emStVGI_H
Store:		poStVGI_I(Cptr, Cint)			$1		$emStVGI_I
Store:		poStVGI_L(Cptr, Clong)			$1		$emStVGI_L
Store:		poStVGI_F(Cptr, Cfloat)			$1		$emStVGI_F
Store:		poStVGI_D(Cptr, Cdouble)			$1		$emStVGI_D
Store:		poStVGI_A(Cptr, Cptr)			$1		$emStVGI_A

Store:		poSt_I(poAddI_A(Vptr, Cint), Vint)		$0		$emSt_IRegisterIndirect
Store:		poStI_I(poAddI_A(Vptr, Cint), Cint)		$0		$emStI_IRegisterIndirect

// Store, Vint:		poMEnter_A(Vptr)			$1		$emMEnter_A
// Store, Vint:		poMEnterG_A(Cptr)			$1		$emMEnterG_A
// Store, Vint:		poMExit_A(Vptr)			$1		$emMExit_A
// Store, Vint:		poMExitG_A(Cptr)			$1		$emMExitG_A
// Vptr:		poLookupV_A(Vptr, Cint)			$1		$emLookupV_A
// Vptr:		poLookupI_A(Vptr, Cint)			$1		$emLookupI_A
// ...:		poSysCall(M)			$1		$emSysCall
// Store, ...:		poSysCallV(M)			$1		$emSysCallV
// ..., E:		poSysCallE(M)			$1		$emSysCallE
// Store, ..., E:		poSysCallEV(M)			$1		$emSysCallEV
//Store, ..., E:		poCall(Va)			$1		$emCall

VInt:		poCallI			$1		$emCallI_I
Vlong:		poCallI			$1		$emCallI_L
Vfloat:		poCallI			$1		$emCallI_F
Vdouble:	poCallI			$1		$emCallI_D
Vptr:		poCallI			$1		$emCallI_P
// Store, ..., E:		poCallF(F)			$1		$emCallF

%

